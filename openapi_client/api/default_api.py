"""
    Twilio - Api

    This is the public Twilio REST API.  # noqa: E501

    The version of the OpenAPI document: 1.8.0
    Contact: support@twilio.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.api_v2010_account import ApiV2010Account
from openapi_client.model.api_v2010_account_address import ApiV2010AccountAddress
from openapi_client.model.api_v2010_account_application import ApiV2010AccountApplication
from openapi_client.model.api_v2010_account_authorized_connect_app import ApiV2010AccountAuthorizedConnectApp
from openapi_client.model.api_v2010_account_available_phone_number_country import ApiV2010AccountAvailablePhoneNumberCountry
from openapi_client.model.api_v2010_account_balance import ApiV2010AccountBalance
from openapi_client.model.api_v2010_account_call import ApiV2010AccountCall
from openapi_client.model.api_v2010_account_call_call_feedback import ApiV2010AccountCallCallFeedback
from openapi_client.model.api_v2010_account_call_call_feedback_summary import ApiV2010AccountCallCallFeedbackSummary
from openapi_client.model.api_v2010_account_call_call_notification_instance import ApiV2010AccountCallCallNotificationInstance
from openapi_client.model.api_v2010_account_call_call_recording import ApiV2010AccountCallCallRecording
from openapi_client.model.api_v2010_account_call_payments import ApiV2010AccountCallPayments
from openapi_client.model.api_v2010_account_conference import ApiV2010AccountConference
from openapi_client.model.api_v2010_account_conference_conference_recording import ApiV2010AccountConferenceConferenceRecording
from openapi_client.model.api_v2010_account_conference_participant import ApiV2010AccountConferenceParticipant
from openapi_client.model.api_v2010_account_connect_app import ApiV2010AccountConnectApp
from openapi_client.model.api_v2010_account_incoming_phone_number import ApiV2010AccountIncomingPhoneNumber
from openapi_client.model.api_v2010_account_incoming_phone_number_incoming_phone_number_assigned_add_on import ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
from openapi_client.model.api_v2010_account_incoming_phone_number_incoming_phone_number_assigned_add_on_incoming_phone_number_assigned_add_on_extension import ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
from openapi_client.model.api_v2010_account_incoming_phone_number_incoming_phone_number_local import ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
from openapi_client.model.api_v2010_account_incoming_phone_number_incoming_phone_number_mobile import ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile
from openapi_client.model.api_v2010_account_incoming_phone_number_incoming_phone_number_toll_free import ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree
from openapi_client.model.api_v2010_account_key import ApiV2010AccountKey
from openapi_client.model.api_v2010_account_message import ApiV2010AccountMessage
from openapi_client.model.api_v2010_account_message_media import ApiV2010AccountMessageMedia
from openapi_client.model.api_v2010_account_message_message_feedback import ApiV2010AccountMessageMessageFeedback
from openapi_client.model.api_v2010_account_new_key import ApiV2010AccountNewKey
from openapi_client.model.api_v2010_account_new_signing_key import ApiV2010AccountNewSigningKey
from openapi_client.model.api_v2010_account_notification_instance import ApiV2010AccountNotificationInstance
from openapi_client.model.api_v2010_account_outgoing_caller_id import ApiV2010AccountOutgoingCallerId
from openapi_client.model.api_v2010_account_queue import ApiV2010AccountQueue
from openapi_client.model.api_v2010_account_queue_member import ApiV2010AccountQueueMember
from openapi_client.model.api_v2010_account_recording import ApiV2010AccountRecording
from openapi_client.model.api_v2010_account_recording_recording_add_on_result import ApiV2010AccountRecordingRecordingAddOnResult
from openapi_client.model.api_v2010_account_recording_recording_add_on_result_recording_add_on_result_payload import ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload
from openapi_client.model.api_v2010_account_recording_recording_transcription import ApiV2010AccountRecordingRecordingTranscription
from openapi_client.model.api_v2010_account_short_code import ApiV2010AccountShortCode
from openapi_client.model.api_v2010_account_signing_key import ApiV2010AccountSigningKey
from openapi_client.model.api_v2010_account_sip_sip_credential_list import ApiV2010AccountSipSipCredentialList
from openapi_client.model.api_v2010_account_sip_sip_credential_list_sip_credential import ApiV2010AccountSipSipCredentialListSipCredential
from openapi_client.model.api_v2010_account_sip_sip_domain import ApiV2010AccountSipSipDomain
from openapi_client.model.api_v2010_account_sip_sip_domain_sip_auth_sip_auth_calls_sip_auth_calls_credential_list_mapping import ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
from openapi_client.model.api_v2010_account_sip_sip_domain_sip_auth_sip_auth_calls_sip_auth_calls_ip_access_control_list_mapping import ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
from openapi_client.model.api_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping import ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
from openapi_client.model.api_v2010_account_sip_sip_domain_sip_credential_list_mapping import ApiV2010AccountSipSipDomainSipCredentialListMapping
from openapi_client.model.api_v2010_account_sip_sip_domain_sip_ip_access_control_list_mapping import ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
from openapi_client.model.api_v2010_account_sip_sip_ip_access_control_list import ApiV2010AccountSipSipIpAccessControlList
from openapi_client.model.api_v2010_account_sip_sip_ip_access_control_list_sip_ip_address import ApiV2010AccountSipSipIpAccessControlListSipIpAddress
from openapi_client.model.api_v2010_account_token import ApiV2010AccountToken
from openapi_client.model.api_v2010_account_transcription import ApiV2010AccountTranscription
from openapi_client.model.api_v2010_account_usage_usage_trigger import ApiV2010AccountUsageUsageTrigger
from openapi_client.model.api_v2010_account_validation_request import ApiV2010AccountValidationRequest
from openapi_client.model.inline_response200 import InlineResponse200
from openapi_client.model.inline_response2001 import InlineResponse2001
from openapi_client.model.inline_response20010 import InlineResponse20010
from openapi_client.model.inline_response20011 import InlineResponse20011
from openapi_client.model.inline_response20012 import InlineResponse20012
from openapi_client.model.inline_response20013 import InlineResponse20013
from openapi_client.model.inline_response20014 import InlineResponse20014
from openapi_client.model.inline_response20015 import InlineResponse20015
from openapi_client.model.inline_response20016 import InlineResponse20016
from openapi_client.model.inline_response20017 import InlineResponse20017
from openapi_client.model.inline_response20018 import InlineResponse20018
from openapi_client.model.inline_response20019 import InlineResponse20019
from openapi_client.model.inline_response2002 import InlineResponse2002
from openapi_client.model.inline_response20020 import InlineResponse20020
from openapi_client.model.inline_response20021 import InlineResponse20021
from openapi_client.model.inline_response20022 import InlineResponse20022
from openapi_client.model.inline_response20023 import InlineResponse20023
from openapi_client.model.inline_response20024 import InlineResponse20024
from openapi_client.model.inline_response20025 import InlineResponse20025
from openapi_client.model.inline_response20026 import InlineResponse20026
from openapi_client.model.inline_response20027 import InlineResponse20027
from openapi_client.model.inline_response20028 import InlineResponse20028
from openapi_client.model.inline_response20029 import InlineResponse20029
from openapi_client.model.inline_response2003 import InlineResponse2003
from openapi_client.model.inline_response20030 import InlineResponse20030
from openapi_client.model.inline_response20031 import InlineResponse20031
from openapi_client.model.inline_response20032 import InlineResponse20032
from openapi_client.model.inline_response20033 import InlineResponse20033
from openapi_client.model.inline_response20034 import InlineResponse20034
from openapi_client.model.inline_response20035 import InlineResponse20035
from openapi_client.model.inline_response20036 import InlineResponse20036
from openapi_client.model.inline_response20037 import InlineResponse20037
from openapi_client.model.inline_response20038 import InlineResponse20038
from openapi_client.model.inline_response20039 import InlineResponse20039
from openapi_client.model.inline_response2004 import InlineResponse2004
from openapi_client.model.inline_response20040 import InlineResponse20040
from openapi_client.model.inline_response20041 import InlineResponse20041
from openapi_client.model.inline_response20042 import InlineResponse20042
from openapi_client.model.inline_response20043 import InlineResponse20043
from openapi_client.model.inline_response20044 import InlineResponse20044
from openapi_client.model.inline_response20045 import InlineResponse20045
from openapi_client.model.inline_response20046 import InlineResponse20046
from openapi_client.model.inline_response20047 import InlineResponse20047
from openapi_client.model.inline_response20048 import InlineResponse20048
from openapi_client.model.inline_response20049 import InlineResponse20049
from openapi_client.model.inline_response2005 import InlineResponse2005
from openapi_client.model.inline_response20050 import InlineResponse20050
from openapi_client.model.inline_response20051 import InlineResponse20051
from openapi_client.model.inline_response20052 import InlineResponse20052
from openapi_client.model.inline_response20053 import InlineResponse20053
from openapi_client.model.inline_response20054 import InlineResponse20054
from openapi_client.model.inline_response20055 import InlineResponse20055
from openapi_client.model.inline_response20056 import InlineResponse20056
from openapi_client.model.inline_response20057 import InlineResponse20057
from openapi_client.model.inline_response20058 import InlineResponse20058
from openapi_client.model.inline_response20059 import InlineResponse20059
from openapi_client.model.inline_response2006 import InlineResponse2006
from openapi_client.model.inline_response20060 import InlineResponse20060
from openapi_client.model.inline_response2007 import InlineResponse2007
from openapi_client.model.inline_response2008 import InlineResponse2008
from openapi_client.model.inline_response2009 import InlineResponse2009


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_account(
            self,
            **kwargs
        ):
            """create_account  # noqa: E501

            Create a new Twilio Subaccount from the account making the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_account(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                friendly_name (str): A human readable description of the account to create, defaults to `SubAccount Created at {YYYY-MM-DD HH:MM meridian}`. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010Account
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_account = Endpoint(
            settings={
                'response_type': (ApiV2010Account,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts.json',
                'operation_id': 'create_account',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'friendly_name',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_account
        )

        def __create_address(
            self,
            account_sid,
            city,
            customer_name,
            iso_country,
            postal_code,
            region,
            street,
            **kwargs
        ):
            """create_address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_address(account_sid, city, customer_name, iso_country, postal_code, region, street, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
                city (str): The city of the new address.
                customer_name (str): The name to associate with the new address.
                iso_country (str): The ISO country code of the new address.
                postal_code (str): The postal code of the new address.
                region (str): The state or region of the new address.
                street (str): The number and street address of the new address.

            Keyword Args:
                auto_correct_address (bool): Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.. [optional]
                emergency_enabled (bool): Whether to enable emergency calling on the new address. Can be: `true` or `false`.. [optional]
                friendly_name (str): A descriptive string that you create to describe the new address. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['city'] = \
                city
            kwargs['customer_name'] = \
                customer_name
            kwargs['iso_country'] = \
                iso_country
            kwargs['postal_code'] = \
                postal_code
            kwargs['region'] = \
                region
            kwargs['street'] = \
                street
            return self.call_with_http_info(**kwargs)

        self.create_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses.json',
                'operation_id': 'create_address',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'city',
                    'customer_name',
                    'iso_country',
                    'postal_code',
                    'region',
                    'street',
                    'auto_correct_address',
                    'emergency_enabled',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'city',
                    'customer_name',
                    'iso_country',
                    'postal_code',
                    'region',
                    'street',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'city':
                        (str,),
                    'customer_name':
                        (str,),
                    'iso_country':
                        (str,),
                    'postal_code':
                        (str,),
                    'region':
                        (str,),
                    'street':
                        (str,),
                    'auto_correct_address':
                        (bool,),
                    'emergency_enabled':
                        (bool,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'city': 'City',
                    'customer_name': 'CustomerName',
                    'iso_country': 'IsoCountry',
                    'postal_code': 'PostalCode',
                    'region': 'Region',
                    'street': 'Street',
                    'auto_correct_address': 'AutoCorrectAddress',
                    'emergency_enabled': 'EmergencyEnabled',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'city': 'form',
                    'customer_name': 'form',
                    'iso_country': 'form',
                    'postal_code': 'form',
                    'region': 'form',
                    'street': 'form',
                    'auto_correct_address': 'form',
                    'emergency_enabled': 'form',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_address
        )

        def __create_application(
            self,
            account_sid,
            **kwargs
        ):
            """create_application  # noqa: E501

            Create a new application within your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_application(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.

            Keyword Args:
                api_version (str): The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.. [optional]
                friendly_name (str): A descriptive string that you create to describe the new application. It can be up to 64 characters long.. [optional]
                message_status_callback (str): The URL we should call using a POST method to send message status information to your application.. [optional]
                sms_fallback_method (str): The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.. [optional]
                sms_method (str): The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.. [optional]
                sms_status_callback (str): The URL we should call using a POST method to send status information about SMS messages sent by the application.. [optional]
                sms_url (str): The URL we should call when the phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.. [optional]
                voice_caller_id_lookup (bool): Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.. [optional]
                voice_fallback_method (str): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.. [optional]
                voice_url (str): The URL we should call when the phone number assigned to this application receives a call.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountApplication
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.create_application = Endpoint(
            settings={
                'response_type': (ApiV2010AccountApplication,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Applications.json',
                'operation_id': 'create_application',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'api_version',
                    'friendly_name',
                    'message_status_callback',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_status_callback',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'friendly_name':
                        (str,),
                    'message_status_callback':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_status_callback':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'api_version': 'ApiVersion',
                    'friendly_name': 'FriendlyName',
                    'message_status_callback': 'MessageStatusCallback',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_status_callback': 'SmsStatusCallback',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'api_version': 'form',
                    'friendly_name': 'form',
                    'message_status_callback': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_status_callback': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_application
        )

        def __create_call(
            self,
            account_sid,
            _from,
            to,
            **kwargs
        ):
            """create_call  # noqa: E501

            Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_call(account_sid, _from, to, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                _from (str): The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
                to (str): The phone number, SIP address, or client identifier to call.

            Keyword Args:
                application_sid (str): The SID of the Application resource that will handle the call, if the call will be handled by an application.. [optional]
                async_amd (str): Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.. [optional]
                async_amd_status_callback (str): The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.. [optional]
                async_amd_status_callback_method (str): The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.. [optional]
                byoc (str): The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta). [optional]
                call_reason (str): The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta). [optional]
                caller_id (str): The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.. [optional]
                fallback_method (str): The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                fallback_url (str): The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                machine_detection (str): Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).. [optional]
                machine_detection_silence_timeout (int): The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.. [optional]
                machine_detection_speech_end_threshold (int): The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.. [optional]
                machine_detection_speech_threshold (int): The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.. [optional]
                machine_detection_timeout (int): The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.. [optional]
                method (str): The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                record (bool): Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.. [optional]
                recording_channels (str): The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.. [optional]
                recording_status_callback (str): The URL that we call when the recording is available to be accessed.. [optional]
                recording_status_callback_event ([str]): The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.. [optional]
                recording_status_callback_method (str): The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.. [optional]
                recording_track (str): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.. [optional]
                send_digits (str): A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.. [optional]
                sip_auth_password (str): The password required to authenticate the user account specified in `sip_auth_username`.. [optional]
                sip_auth_username (str): The username used to authenticate the caller making a SIP call.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).. [optional]
                status_callback_event ([str]): The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.. [optional]
                status_callback_method (str): The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                timeout (int): The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.. [optional]
                trim (str): Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.. [optional]
                twiml (str): TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored.. [optional]
                url (str): The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCall
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['_from'] = \
                _from
            kwargs['to'] = \
                to
            return self.call_with_http_info(**kwargs)

        self.create_call = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCall,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls.json',
                'operation_id': 'create_call',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    '_from',
                    'to',
                    'application_sid',
                    'async_amd',
                    'async_amd_status_callback',
                    'async_amd_status_callback_method',
                    'byoc',
                    'call_reason',
                    'caller_id',
                    'fallback_method',
                    'fallback_url',
                    'machine_detection',
                    'machine_detection_silence_timeout',
                    'machine_detection_speech_end_threshold',
                    'machine_detection_speech_threshold',
                    'machine_detection_timeout',
                    'method',
                    'record',
                    'recording_channels',
                    'recording_status_callback',
                    'recording_status_callback_event',
                    'recording_status_callback_method',
                    'recording_track',
                    'send_digits',
                    'sip_auth_password',
                    'sip_auth_username',
                    'status_callback',
                    'status_callback_event',
                    'status_callback_method',
                    'timeout',
                    'trim',
                    'twiml',
                    'url',
                ],
                'required': [
                    'account_sid',
                    '_from',
                    'to',
                ],
                'nullable': [
                ],
                'enum': [
                    'async_amd_status_callback_method',
                    'fallback_method',
                    'method',
                    'recording_status_callback_method',
                    'status_callback_method',
                ],
                'validation': [
                    'account_sid',
                    'application_sid',
                    'byoc',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('byoc',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BY[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('async_amd_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('recording_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    '_from':
                        (str,),
                    'to':
                        (str,),
                    'application_sid':
                        (str,),
                    'async_amd':
                        (str,),
                    'async_amd_status_callback':
                        (str,),
                    'async_amd_status_callback_method':
                        (str,),
                    'byoc':
                        (str,),
                    'call_reason':
                        (str,),
                    'caller_id':
                        (str,),
                    'fallback_method':
                        (str,),
                    'fallback_url':
                        (str,),
                    'machine_detection':
                        (str,),
                    'machine_detection_silence_timeout':
                        (int,),
                    'machine_detection_speech_end_threshold':
                        (int,),
                    'machine_detection_speech_threshold':
                        (int,),
                    'machine_detection_timeout':
                        (int,),
                    'method':
                        (str,),
                    'record':
                        (bool,),
                    'recording_channels':
                        (str,),
                    'recording_status_callback':
                        (str,),
                    'recording_status_callback_event':
                        ([str],),
                    'recording_status_callback_method':
                        (str,),
                    'recording_track':
                        (str,),
                    'send_digits':
                        (str,),
                    'sip_auth_password':
                        (str,),
                    'sip_auth_username':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_event':
                        ([str],),
                    'status_callback_method':
                        (str,),
                    'timeout':
                        (int,),
                    'trim':
                        (str,),
                    'twiml':
                        (str,),
                    'url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    '_from': 'From',
                    'to': 'To',
                    'application_sid': 'ApplicationSid',
                    'async_amd': 'AsyncAmd',
                    'async_amd_status_callback': 'AsyncAmdStatusCallback',
                    'async_amd_status_callback_method': 'AsyncAmdStatusCallbackMethod',
                    'byoc': 'Byoc',
                    'call_reason': 'CallReason',
                    'caller_id': 'CallerId',
                    'fallback_method': 'FallbackMethod',
                    'fallback_url': 'FallbackUrl',
                    'machine_detection': 'MachineDetection',
                    'machine_detection_silence_timeout': 'MachineDetectionSilenceTimeout',
                    'machine_detection_speech_end_threshold': 'MachineDetectionSpeechEndThreshold',
                    'machine_detection_speech_threshold': 'MachineDetectionSpeechThreshold',
                    'machine_detection_timeout': 'MachineDetectionTimeout',
                    'method': 'Method',
                    'record': 'Record',
                    'recording_channels': 'RecordingChannels',
                    'recording_status_callback': 'RecordingStatusCallback',
                    'recording_status_callback_event': 'RecordingStatusCallbackEvent',
                    'recording_status_callback_method': 'RecordingStatusCallbackMethod',
                    'recording_track': 'RecordingTrack',
                    'send_digits': 'SendDigits',
                    'sip_auth_password': 'SipAuthPassword',
                    'sip_auth_username': 'SipAuthUsername',
                    'status_callback': 'StatusCallback',
                    'status_callback_event': 'StatusCallbackEvent',
                    'status_callback_method': 'StatusCallbackMethod',
                    'timeout': 'Timeout',
                    'trim': 'Trim',
                    'twiml': 'Twiml',
                    'url': 'Url',
                },
                'location_map': {
                    'account_sid': 'path',
                    '_from': 'form',
                    'to': 'form',
                    'application_sid': 'form',
                    'async_amd': 'form',
                    'async_amd_status_callback': 'form',
                    'async_amd_status_callback_method': 'form',
                    'byoc': 'form',
                    'call_reason': 'form',
                    'caller_id': 'form',
                    'fallback_method': 'form',
                    'fallback_url': 'form',
                    'machine_detection': 'form',
                    'machine_detection_silence_timeout': 'form',
                    'machine_detection_speech_end_threshold': 'form',
                    'machine_detection_speech_threshold': 'form',
                    'machine_detection_timeout': 'form',
                    'method': 'form',
                    'record': 'form',
                    'recording_channels': 'form',
                    'recording_status_callback': 'form',
                    'recording_status_callback_event': 'form',
                    'recording_status_callback_method': 'form',
                    'recording_track': 'form',
                    'send_digits': 'form',
                    'sip_auth_password': 'form',
                    'sip_auth_username': 'form',
                    'status_callback': 'form',
                    'status_callback_event': 'form',
                    'status_callback_method': 'form',
                    'timeout': 'form',
                    'trim': 'form',
                    'twiml': 'form',
                    'url': 'form',
                },
                'collection_format_map': {
                    'recording_status_callback_event': 'csv',
                    'status_callback_event': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_call
        )

        def __create_call_feedback_summary(
            self,
            account_sid,
            end_date,
            start_date,
            **kwargs
        ):
            """create_call_feedback_summary  # noqa: E501

            Create a FeedbackSummary resource for a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_call_feedback_summary(account_sid, end_date, start_date, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                end_date (datetime): Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
                start_date (datetime): Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.

            Keyword Args:
                include_subaccounts (bool): Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.. [optional]
                status_callback (str): The URL that we will request when the feedback summary is complete.. [optional]
                status_callback_method (str): The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallFeedbackSummary
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['end_date'] = \
                end_date
            kwargs['start_date'] = \
                start_date
            return self.call_with_http_info(**kwargs)

        self.create_call_feedback_summary = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallFeedbackSummary,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json',
                'operation_id': 'create_call_feedback_summary',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'end_date',
                    'start_date',
                    'include_subaccounts',
                    'status_callback',
                    'status_callback_method',
                ],
                'required': [
                    'account_sid',
                    'end_date',
                    'start_date',
                ],
                'nullable': [
                ],
                'enum': [
                    'status_callback_method',
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'end_date':
                        (datetime,),
                    'start_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'end_date': 'EndDate',
                    'start_date': 'StartDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                },
                'location_map': {
                    'account_sid': 'path',
                    'end_date': 'form',
                    'start_date': 'form',
                    'include_subaccounts': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_call_feedback_summary
        )

        def __create_call_recording(
            self,
            account_sid,
            call_sid,
            **kwargs
        ):
            """create_call_recording  # noqa: E501

            Create a recording for the call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_call_recording(account_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                call_sid (str): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.

            Keyword Args:
                recording_channels (str): The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.. [optional]
                recording_status_callback (str): The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).. [optional]
                recording_status_callback_event ([str]): The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.. [optional]
                recording_status_callback_method (str): The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.. [optional]
                recording_track (str): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.. [optional]
                trim (str): Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.create_call_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json',
                'operation_id': 'create_call_recording',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'recording_channels',
                    'recording_status_callback',
                    'recording_status_callback_event',
                    'recording_status_callback_method',
                    'recording_track',
                    'trim',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'recording_status_callback_method',
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('recording_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'recording_channels':
                        (str,),
                    'recording_status_callback':
                        (str,),
                    'recording_status_callback_event':
                        ([str],),
                    'recording_status_callback_method':
                        (str,),
                    'recording_track':
                        (str,),
                    'trim':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'recording_channels': 'RecordingChannels',
                    'recording_status_callback': 'RecordingStatusCallback',
                    'recording_status_callback_event': 'RecordingStatusCallbackEvent',
                    'recording_status_callback_method': 'RecordingStatusCallbackMethod',
                    'recording_track': 'RecordingTrack',
                    'trim': 'Trim',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'recording_channels': 'form',
                    'recording_status_callback': 'form',
                    'recording_status_callback_event': 'form',
                    'recording_status_callback_method': 'form',
                    'recording_track': 'form',
                    'trim': 'form',
                },
                'collection_format_map': {
                    'recording_status_callback_event': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_call_recording
        )

        def __create_incoming_phone_number(
            self,
            account_sid,
            **kwargs
        ):
            """create_incoming_phone_number  # noqa: E501

            Purchase a phone-number for the account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_incoming_phone_number(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.

            Keyword Args:
                address_sid (str): The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.. [optional]
                api_version (str): The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.. [optional]
                area_code (str): The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an `area_code` or a `phone_number`.** (US and Canada only).. [optional]
                bundle_sid (str): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.. [optional]
                emergency_address_sid (str): The SID of the emergency address configuration to use for emergency calling from the new phone number.. [optional]
                emergency_status (str): The configuration status parameter that determines whether the new phone number is enabled for emergency calling.. [optional]
                friendly_name (str): A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number.. [optional]
                identity_sid (str): The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.. [optional]
                phone_number (str): The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.. [optional]
                sms_application_sid (str): The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.. [optional]
                sms_method (str): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_url (str): The URL we should call when the new phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                trunk_sid (str): The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.. [optional]
                voice_application_sid (str): The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.. [optional]
                voice_caller_id_lookup (bool): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.. [optional]
                voice_fallback_method (str): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_receive_mode (str): The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.. [optional]
                voice_url (str): The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumber
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.create_incoming_phone_number = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumber,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json',
                'operation_id': 'create_incoming_phone_number',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'address_sid',
                    'api_version',
                    'area_code',
                    'bundle_sid',
                    'emergency_address_sid',
                    'emergency_status',
                    'friendly_name',
                    'identity_sid',
                    'phone_number',
                    'sms_application_sid',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'trunk_sid',
                    'voice_application_sid',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_receive_mode',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'emergency_status',
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                    'voice_receive_mode',
                ],
                'validation': [
                    'account_sid',
                    'address_sid',
                    'bundle_sid',
                    'emergency_address_sid',
                    'identity_sid',
                    'sms_application_sid',
                    'trunk_sid',
                    'voice_application_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('bundle_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('identity_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RI[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sms_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('voice_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('emergency_status',): {

                        "ACTIVE": "Active",
                        "INACTIVE": "Inactive"
                    },
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_receive_mode',): {

                        "VOICE": "voice",
                        "FAX": "fax"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'address_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'area_code':
                        (str,),
                    'bundle_sid':
                        (str,),
                    'emergency_address_sid':
                        (str,),
                    'emergency_status':
                        (str,),
                    'friendly_name':
                        (str,),
                    'identity_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'sms_application_sid':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'trunk_sid':
                        (str,),
                    'voice_application_sid':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_receive_mode':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'address_sid': 'AddressSid',
                    'api_version': 'ApiVersion',
                    'area_code': 'AreaCode',
                    'bundle_sid': 'BundleSid',
                    'emergency_address_sid': 'EmergencyAddressSid',
                    'emergency_status': 'EmergencyStatus',
                    'friendly_name': 'FriendlyName',
                    'identity_sid': 'IdentitySid',
                    'phone_number': 'PhoneNumber',
                    'sms_application_sid': 'SmsApplicationSid',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'trunk_sid': 'TrunkSid',
                    'voice_application_sid': 'VoiceApplicationSid',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_receive_mode': 'VoiceReceiveMode',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'address_sid': 'form',
                    'api_version': 'form',
                    'area_code': 'form',
                    'bundle_sid': 'form',
                    'emergency_address_sid': 'form',
                    'emergency_status': 'form',
                    'friendly_name': 'form',
                    'identity_sid': 'form',
                    'phone_number': 'form',
                    'sms_application_sid': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'trunk_sid': 'form',
                    'voice_application_sid': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_receive_mode': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_incoming_phone_number
        )

        def __create_incoming_phone_number_assigned_add_on(
            self,
            account_sid,
            resource_sid,
            installed_add_on_sid,
            **kwargs
        ):
            """create_incoming_phone_number_assigned_add_on  # noqa: E501

            Assign an Add-on installation to the Number specified.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_incoming_phone_number_assigned_add_on(account_sid, resource_sid, installed_add_on_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                resource_sid (str): The SID of the Phone Number to assign the Add-on.
                installed_add_on_sid (str): The SID that identifies the Add-on installation.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            kwargs['installed_add_on_sid'] = \
                installed_add_on_sid
            return self.call_with_http_info(**kwargs)

        self.create_incoming_phone_number_assigned_add_on = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json',
                'operation_id': 'create_incoming_phone_number_assigned_add_on',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'installed_add_on_sid',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                    'installed_add_on_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'installed_add_on_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('installed_add_on_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'installed_add_on_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'installed_add_on_sid': 'InstalledAddOnSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'installed_add_on_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_incoming_phone_number_assigned_add_on
        )

        def __create_incoming_phone_number_local(
            self,
            account_sid,
            phone_number,
            **kwargs
        ):
            """create_incoming_phone_number_local  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_incoming_phone_number_local(account_sid, phone_number, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                phone_number (str): The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.

            Keyword Args:
                address_sid (str): The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.. [optional]
                api_version (str): The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.. [optional]
                bundle_sid (str): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.. [optional]
                emergency_address_sid (str): The SID of the emergency address configuration to use for emergency calling from the new phone number.. [optional]
                emergency_status (str): The configuration status parameter that determines whether the new phone number is enabled for emergency calling.. [optional]
                friendly_name (str): A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.. [optional]
                identity_sid (str): The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.. [optional]
                sms_application_sid (str): The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.. [optional]
                sms_method (str): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_url (str): The URL we should call when the new phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                trunk_sid (str): The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.. [optional]
                voice_application_sid (str): The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.. [optional]
                voice_caller_id_lookup (bool): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.. [optional]
                voice_fallback_method (str): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_receive_mode (str): The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.. [optional]
                voice_url (str): The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['phone_number'] = \
                phone_number
            return self.call_with_http_info(**kwargs)

        self.create_incoming_phone_number_local = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json',
                'operation_id': 'create_incoming_phone_number_local',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'phone_number',
                    'address_sid',
                    'api_version',
                    'bundle_sid',
                    'emergency_address_sid',
                    'emergency_status',
                    'friendly_name',
                    'identity_sid',
                    'sms_application_sid',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'trunk_sid',
                    'voice_application_sid',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_receive_mode',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'phone_number',
                ],
                'nullable': [
                ],
                'enum': [
                    'emergency_status',
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                    'voice_receive_mode',
                ],
                'validation': [
                    'account_sid',
                    'address_sid',
                    'bundle_sid',
                    'emergency_address_sid',
                    'identity_sid',
                    'sms_application_sid',
                    'trunk_sid',
                    'voice_application_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('bundle_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('identity_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RI[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sms_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('voice_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('emergency_status',): {

                        "ACTIVE": "Active",
                        "INACTIVE": "Inactive"
                    },
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_receive_mode',): {

                        "VOICE": "voice",
                        "FAX": "fax"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'address_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'bundle_sid':
                        (str,),
                    'emergency_address_sid':
                        (str,),
                    'emergency_status':
                        (str,),
                    'friendly_name':
                        (str,),
                    'identity_sid':
                        (str,),
                    'sms_application_sid':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'trunk_sid':
                        (str,),
                    'voice_application_sid':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_receive_mode':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'phone_number': 'PhoneNumber',
                    'address_sid': 'AddressSid',
                    'api_version': 'ApiVersion',
                    'bundle_sid': 'BundleSid',
                    'emergency_address_sid': 'EmergencyAddressSid',
                    'emergency_status': 'EmergencyStatus',
                    'friendly_name': 'FriendlyName',
                    'identity_sid': 'IdentitySid',
                    'sms_application_sid': 'SmsApplicationSid',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'trunk_sid': 'TrunkSid',
                    'voice_application_sid': 'VoiceApplicationSid',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_receive_mode': 'VoiceReceiveMode',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'phone_number': 'form',
                    'address_sid': 'form',
                    'api_version': 'form',
                    'bundle_sid': 'form',
                    'emergency_address_sid': 'form',
                    'emergency_status': 'form',
                    'friendly_name': 'form',
                    'identity_sid': 'form',
                    'sms_application_sid': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'trunk_sid': 'form',
                    'voice_application_sid': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_receive_mode': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_incoming_phone_number_local
        )

        def __create_incoming_phone_number_mobile(
            self,
            account_sid,
            phone_number,
            **kwargs
        ):
            """create_incoming_phone_number_mobile  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_incoming_phone_number_mobile(account_sid, phone_number, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                phone_number (str): The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.

            Keyword Args:
                address_sid (str): The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.. [optional]
                api_version (str): The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.. [optional]
                bundle_sid (str): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.. [optional]
                emergency_address_sid (str): The SID of the emergency address configuration to use for emergency calling from the new phone number.. [optional]
                emergency_status (str): The configuration status parameter that determines whether the new phone number is enabled for emergency calling.. [optional]
                friendly_name (str): A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, the is a formatted version of the phone number.. [optional]
                identity_sid (str): The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.. [optional]
                sms_application_sid (str): The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those of the application.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.. [optional]
                sms_method (str): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_url (str): The URL we should call when the new phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                trunk_sid (str): The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.. [optional]
                voice_application_sid (str): The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.. [optional]
                voice_caller_id_lookup (bool): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.. [optional]
                voice_fallback_method (str): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_receive_mode (str): The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.. [optional]
                voice_url (str): The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['phone_number'] = \
                phone_number
            return self.call_with_http_info(**kwargs)

        self.create_incoming_phone_number_mobile = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json',
                'operation_id': 'create_incoming_phone_number_mobile',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'phone_number',
                    'address_sid',
                    'api_version',
                    'bundle_sid',
                    'emergency_address_sid',
                    'emergency_status',
                    'friendly_name',
                    'identity_sid',
                    'sms_application_sid',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'trunk_sid',
                    'voice_application_sid',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_receive_mode',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'phone_number',
                ],
                'nullable': [
                ],
                'enum': [
                    'emergency_status',
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                    'voice_receive_mode',
                ],
                'validation': [
                    'account_sid',
                    'address_sid',
                    'bundle_sid',
                    'emergency_address_sid',
                    'identity_sid',
                    'sms_application_sid',
                    'trunk_sid',
                    'voice_application_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('bundle_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('identity_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RI[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sms_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('voice_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('emergency_status',): {

                        "ACTIVE": "Active",
                        "INACTIVE": "Inactive"
                    },
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_receive_mode',): {

                        "VOICE": "voice",
                        "FAX": "fax"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'address_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'bundle_sid':
                        (str,),
                    'emergency_address_sid':
                        (str,),
                    'emergency_status':
                        (str,),
                    'friendly_name':
                        (str,),
                    'identity_sid':
                        (str,),
                    'sms_application_sid':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'trunk_sid':
                        (str,),
                    'voice_application_sid':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_receive_mode':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'phone_number': 'PhoneNumber',
                    'address_sid': 'AddressSid',
                    'api_version': 'ApiVersion',
                    'bundle_sid': 'BundleSid',
                    'emergency_address_sid': 'EmergencyAddressSid',
                    'emergency_status': 'EmergencyStatus',
                    'friendly_name': 'FriendlyName',
                    'identity_sid': 'IdentitySid',
                    'sms_application_sid': 'SmsApplicationSid',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'trunk_sid': 'TrunkSid',
                    'voice_application_sid': 'VoiceApplicationSid',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_receive_mode': 'VoiceReceiveMode',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'phone_number': 'form',
                    'address_sid': 'form',
                    'api_version': 'form',
                    'bundle_sid': 'form',
                    'emergency_address_sid': 'form',
                    'emergency_status': 'form',
                    'friendly_name': 'form',
                    'identity_sid': 'form',
                    'sms_application_sid': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'trunk_sid': 'form',
                    'voice_application_sid': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_receive_mode': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_incoming_phone_number_mobile
        )

        def __create_incoming_phone_number_toll_free(
            self,
            account_sid,
            phone_number,
            **kwargs
        ):
            """create_incoming_phone_number_toll_free  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_incoming_phone_number_toll_free(account_sid, phone_number, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                phone_number (str): The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.

            Keyword Args:
                address_sid (str): The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.. [optional]
                api_version (str): The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.. [optional]
                bundle_sid (str): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.. [optional]
                emergency_address_sid (str): The SID of the emergency address configuration to use for emergency calling from the new phone number.. [optional]
                emergency_status (str): The configuration status parameter that determines whether the new phone number is enabled for emergency calling.. [optional]
                friendly_name (str): A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.. [optional]
                identity_sid (str): The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.. [optional]
                sms_application_sid (str): The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.. [optional]
                sms_method (str): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_url (str): The URL we should call when the new phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                trunk_sid (str): The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.. [optional]
                voice_application_sid (str): The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.. [optional]
                voice_caller_id_lookup (bool): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.. [optional]
                voice_fallback_method (str): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_receive_mode (str): The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.. [optional]
                voice_url (str): The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['phone_number'] = \
                phone_number
            return self.call_with_http_info(**kwargs)

        self.create_incoming_phone_number_toll_free = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json',
                'operation_id': 'create_incoming_phone_number_toll_free',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'phone_number',
                    'address_sid',
                    'api_version',
                    'bundle_sid',
                    'emergency_address_sid',
                    'emergency_status',
                    'friendly_name',
                    'identity_sid',
                    'sms_application_sid',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'trunk_sid',
                    'voice_application_sid',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_receive_mode',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'phone_number',
                ],
                'nullable': [
                ],
                'enum': [
                    'emergency_status',
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                    'voice_receive_mode',
                ],
                'validation': [
                    'account_sid',
                    'address_sid',
                    'bundle_sid',
                    'emergency_address_sid',
                    'identity_sid',
                    'sms_application_sid',
                    'trunk_sid',
                    'voice_application_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('bundle_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('identity_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RI[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sms_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('voice_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('emergency_status',): {

                        "ACTIVE": "Active",
                        "INACTIVE": "Inactive"
                    },
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_receive_mode',): {

                        "VOICE": "voice",
                        "FAX": "fax"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'address_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'bundle_sid':
                        (str,),
                    'emergency_address_sid':
                        (str,),
                    'emergency_status':
                        (str,),
                    'friendly_name':
                        (str,),
                    'identity_sid':
                        (str,),
                    'sms_application_sid':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'trunk_sid':
                        (str,),
                    'voice_application_sid':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_receive_mode':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'phone_number': 'PhoneNumber',
                    'address_sid': 'AddressSid',
                    'api_version': 'ApiVersion',
                    'bundle_sid': 'BundleSid',
                    'emergency_address_sid': 'EmergencyAddressSid',
                    'emergency_status': 'EmergencyStatus',
                    'friendly_name': 'FriendlyName',
                    'identity_sid': 'IdentitySid',
                    'sms_application_sid': 'SmsApplicationSid',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'trunk_sid': 'TrunkSid',
                    'voice_application_sid': 'VoiceApplicationSid',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_receive_mode': 'VoiceReceiveMode',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'phone_number': 'form',
                    'address_sid': 'form',
                    'api_version': 'form',
                    'bundle_sid': 'form',
                    'emergency_address_sid': 'form',
                    'emergency_status': 'form',
                    'friendly_name': 'form',
                    'identity_sid': 'form',
                    'sms_application_sid': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'trunk_sid': 'form',
                    'voice_application_sid': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_receive_mode': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_incoming_phone_number_toll_free
        )

        def __create_message(
            self,
            account_sid,
            to,
            **kwargs
        ):
            """create_message  # noqa: E501

            Send a message from the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_message(account_sid, to, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                to (str): The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.

            Keyword Args:
                address_retention (str): Determines if the address can be stored or obfuscated based on privacy settings. [optional] if omitted the server will use the default value of "retain"
                application_sid (str): The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.. [optional]
                attempt (int): Total number of attempts made ( including this ) to send out the message regardless of the provider used. [optional]
                body (str): The text of the message you want to send. Can be up to 1,600 characters in length.. [optional]
                content_retention (str): Determines if the message content can be stored or redacted based on privacy settings. [optional] if omitted the server will use the default value of "retain"
                force_delivery (bool): Reserved. [optional]
                _from (str): A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.. [optional]
                max_price (float): The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.. [optional]
                media_url ([str]): The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.. [optional]
                messaging_service_sid (str): The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.. [optional]
                persistent_action ([str]): Rich actions for Channels Messages.. [optional]
                provide_feedback (bool): Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.. [optional]
                smart_encoded (bool): Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.. [optional]
                validity_period (int): How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountMessage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['to'] = \
                to
            return self.call_with_http_info(**kwargs)

        self.create_message = Endpoint(
            settings={
                'response_type': (ApiV2010AccountMessage,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages.json',
                'operation_id': 'create_message',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'to',
                    'address_retention',
                    'application_sid',
                    'attempt',
                    'body',
                    'content_retention',
                    'force_delivery',
                    '_from',
                    'max_price',
                    'media_url',
                    'messaging_service_sid',
                    'persistent_action',
                    'provide_feedback',
                    'smart_encoded',
                    'status_callback',
                    'validity_period',
                ],
                'required': [
                    'account_sid',
                    'to',
                ],
                'nullable': [
                ],
                'enum': [
                    'address_retention',
                    'content_retention',
                ],
                'validation': [
                    'account_sid',
                    'application_sid',
                    'messaging_service_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('messaging_service_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^MG[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('address_retention',): {

                        "RETAIN": "retain"
                    },
                    ('content_retention',): {

                        "RETAIN": "retain"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'to':
                        (str,),
                    'address_retention':
                        (str,),
                    'application_sid':
                        (str,),
                    'attempt':
                        (int,),
                    'body':
                        (str,),
                    'content_retention':
                        (str,),
                    'force_delivery':
                        (bool,),
                    '_from':
                        (str,),
                    'max_price':
                        (float,),
                    'media_url':
                        ([str],),
                    'messaging_service_sid':
                        (str,),
                    'persistent_action':
                        ([str],),
                    'provide_feedback':
                        (bool,),
                    'smart_encoded':
                        (bool,),
                    'status_callback':
                        (str,),
                    'validity_period':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'to': 'To',
                    'address_retention': 'AddressRetention',
                    'application_sid': 'ApplicationSid',
                    'attempt': 'Attempt',
                    'body': 'Body',
                    'content_retention': 'ContentRetention',
                    'force_delivery': 'ForceDelivery',
                    '_from': 'From',
                    'max_price': 'MaxPrice',
                    'media_url': 'MediaUrl',
                    'messaging_service_sid': 'MessagingServiceSid',
                    'persistent_action': 'PersistentAction',
                    'provide_feedback': 'ProvideFeedback',
                    'smart_encoded': 'SmartEncoded',
                    'status_callback': 'StatusCallback',
                    'validity_period': 'ValidityPeriod',
                },
                'location_map': {
                    'account_sid': 'path',
                    'to': 'form',
                    'address_retention': 'form',
                    'application_sid': 'form',
                    'attempt': 'form',
                    'body': 'form',
                    'content_retention': 'form',
                    'force_delivery': 'form',
                    '_from': 'form',
                    'max_price': 'form',
                    'media_url': 'form',
                    'messaging_service_sid': 'form',
                    'persistent_action': 'form',
                    'provide_feedback': 'form',
                    'smart_encoded': 'form',
                    'status_callback': 'form',
                    'validity_period': 'form',
                },
                'collection_format_map': {
                    'media_url': 'csv',
                    'persistent_action': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_message
        )

        def __create_message_feedback(
            self,
            account_sid,
            message_sid,
            **kwargs
        ):
            """create_message_feedback  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_message_feedback(account_sid, message_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                message_sid (str): The SID of the Message resource for which the feedback was provided.

            Keyword Args:
                outcome (str): Whether the feedback has arrived. Can be: `unconfirmed` or `confirmed`. If `provide_feedback`=`true` in [the initial HTTP POST](https://www.twilio.com/docs/sms/api/message-resource#create-a-message-resource), the initial value of this property is `unconfirmed`. After the message arrives, update the value to `confirmed`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountMessageMessageFeedback
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['message_sid'] = \
                message_sid
            return self.call_with_http_info(**kwargs)

        self.create_message_feedback = Endpoint(
            settings={
                'response_type': (ApiV2010AccountMessageMessageFeedback,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json',
                'operation_id': 'create_message_feedback',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'message_sid',
                    'outcome',
                ],
                'required': [
                    'account_sid',
                    'message_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'outcome',
                ],
                'validation': [
                    'account_sid',
                    'message_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('message_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('outcome',): {

                        "CONFIRMED": "confirmed",
                        "UNCONFIRMED": "unconfirmed"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'message_sid':
                        (str,),
                    'outcome':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'message_sid': 'MessageSid',
                    'outcome': 'Outcome',
                },
                'location_map': {
                    'account_sid': 'path',
                    'message_sid': 'path',
                    'outcome': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_message_feedback
        )

        def __create_new_key(
            self,
            account_sid,
            **kwargs
        ):
            """create_new_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_new_key(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.

            Keyword Args:
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountNewKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.create_new_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountNewKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Keys.json',
                'operation_id': 'create_new_key',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_new_key
        )

        def __create_new_signing_key(
            self,
            account_sid,
            **kwargs
        ):
            """create_new_signing_key  # noqa: E501

            Create a new Signing Key for the account making the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_new_signing_key(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.

            Keyword Args:
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountNewSigningKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.create_new_signing_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountNewSigningKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SigningKeys.json',
                'operation_id': 'create_new_signing_key',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_new_signing_key
        )

        def __create_participant(
            self,
            account_sid,
            conference_sid,
            _from,
            to,
            **kwargs
        ):
            """create_participant  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_participant(account_sid, conference_sid, _from, to, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                conference_sid (str): The SID of the participant's conference.
                _from (str): The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
                to (str): The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.

            Keyword Args:
                beep (str): Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.. [optional]
                byoc (str): The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta). [optional]
                call_reason (str): The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta). [optional]
                call_sid_to_coach (str): The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.. [optional]
                caller_id (str): The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.. [optional]
                coaching (bool): Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.. [optional]
                conference_record (str): Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.. [optional]
                conference_recording_status_callback (str): The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.. [optional]
                conference_recording_status_callback_event ([str]): The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, and `failed`. Separate multiple values with a space. The default value is `in-progress completed failed`.. [optional]
                conference_recording_status_callback_method (str): The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                conference_status_callback (str): The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.. [optional]
                conference_status_callback_event ([str]): The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, and `speaker`. Separate multiple values with a space. Defaults to `start end`.. [optional]
                conference_status_callback_method (str): The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                conference_trim (str): Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.. [optional]
                early_media (bool): Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.. [optional]
                end_conference_on_exit (bool): Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.. [optional]
                jitter_buffer_size (str): Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.. [optional]
                label (str): A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.. [optional]
                max_participants (int): The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.. [optional]
                muted (bool): Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.. [optional]
                record (bool): Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.. [optional]
                recording_channels (str): The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.. [optional]
                recording_status_callback (str): The URL that we should call using the `recording_status_callback_method` when the recording status changes.. [optional]
                recording_status_callback_event ([str]): The recording state changes that should generate a call to `recording_status_callback`. Can be: `in-progress`, `completed`, and `failed`. Separate multiple values with a space. The default value is `in-progress completed failed`.. [optional]
                recording_status_callback_method (str): The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                recording_track (str): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.. [optional]
                region (str): The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.. [optional]
                sip_auth_password (str): The SIP password for authentication.. [optional]
                sip_auth_username (str): The SIP username used for authentication.. [optional]
                start_conference_on_enter (bool): Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_event ([str]): The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.. [optional]
                timeout (int): The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.. [optional]
                wait_method (str): The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.. [optional]
                wait_url (str): The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConferenceParticipant
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['_from'] = \
                _from
            kwargs['to'] = \
                to
            return self.call_with_http_info(**kwargs)

        self.create_participant = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConferenceParticipant,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json',
                'operation_id': 'create_participant',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    '_from',
                    'to',
                    'beep',
                    'byoc',
                    'call_reason',
                    'call_sid_to_coach',
                    'caller_id',
                    'coaching',
                    'conference_record',
                    'conference_recording_status_callback',
                    'conference_recording_status_callback_event',
                    'conference_recording_status_callback_method',
                    'conference_status_callback',
                    'conference_status_callback_event',
                    'conference_status_callback_method',
                    'conference_trim',
                    'early_media',
                    'end_conference_on_exit',
                    'jitter_buffer_size',
                    'label',
                    'max_participants',
                    'muted',
                    'record',
                    'recording_channels',
                    'recording_status_callback',
                    'recording_status_callback_event',
                    'recording_status_callback_method',
                    'recording_track',
                    'region',
                    'sip_auth_password',
                    'sip_auth_username',
                    'start_conference_on_enter',
                    'status_callback',
                    'status_callback_event',
                    'status_callback_method',
                    'timeout',
                    'wait_method',
                    'wait_url',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    '_from',
                    'to',
                ],
                'nullable': [
                ],
                'enum': [
                    'conference_recording_status_callback_method',
                    'conference_status_callback_method',
                    'recording_status_callback_method',
                    'status_callback_method',
                    'wait_method',
                ],
                'validation': [
                    'account_sid',
                    'byoc',
                    'call_sid_to_coach',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('byoc',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BY[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid_to_coach',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('conference_recording_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('conference_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('recording_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('wait_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    '_from':
                        (str,),
                    'to':
                        (str,),
                    'beep':
                        (str,),
                    'byoc':
                        (str,),
                    'call_reason':
                        (str,),
                    'call_sid_to_coach':
                        (str,),
                    'caller_id':
                        (str,),
                    'coaching':
                        (bool,),
                    'conference_record':
                        (str,),
                    'conference_recording_status_callback':
                        (str,),
                    'conference_recording_status_callback_event':
                        ([str],),
                    'conference_recording_status_callback_method':
                        (str,),
                    'conference_status_callback':
                        (str,),
                    'conference_status_callback_event':
                        ([str],),
                    'conference_status_callback_method':
                        (str,),
                    'conference_trim':
                        (str,),
                    'early_media':
                        (bool,),
                    'end_conference_on_exit':
                        (bool,),
                    'jitter_buffer_size':
                        (str,),
                    'label':
                        (str,),
                    'max_participants':
                        (int,),
                    'muted':
                        (bool,),
                    'record':
                        (bool,),
                    'recording_channels':
                        (str,),
                    'recording_status_callback':
                        (str,),
                    'recording_status_callback_event':
                        ([str],),
                    'recording_status_callback_method':
                        (str,),
                    'recording_track':
                        (str,),
                    'region':
                        (str,),
                    'sip_auth_password':
                        (str,),
                    'sip_auth_username':
                        (str,),
                    'start_conference_on_enter':
                        (bool,),
                    'status_callback':
                        (str,),
                    'status_callback_event':
                        ([str],),
                    'status_callback_method':
                        (str,),
                    'timeout':
                        (int,),
                    'wait_method':
                        (str,),
                    'wait_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    '_from': 'From',
                    'to': 'To',
                    'beep': 'Beep',
                    'byoc': 'Byoc',
                    'call_reason': 'CallReason',
                    'call_sid_to_coach': 'CallSidToCoach',
                    'caller_id': 'CallerId',
                    'coaching': 'Coaching',
                    'conference_record': 'ConferenceRecord',
                    'conference_recording_status_callback': 'ConferenceRecordingStatusCallback',
                    'conference_recording_status_callback_event': 'ConferenceRecordingStatusCallbackEvent',
                    'conference_recording_status_callback_method': 'ConferenceRecordingStatusCallbackMethod',
                    'conference_status_callback': 'ConferenceStatusCallback',
                    'conference_status_callback_event': 'ConferenceStatusCallbackEvent',
                    'conference_status_callback_method': 'ConferenceStatusCallbackMethod',
                    'conference_trim': 'ConferenceTrim',
                    'early_media': 'EarlyMedia',
                    'end_conference_on_exit': 'EndConferenceOnExit',
                    'jitter_buffer_size': 'JitterBufferSize',
                    'label': 'Label',
                    'max_participants': 'MaxParticipants',
                    'muted': 'Muted',
                    'record': 'Record',
                    'recording_channels': 'RecordingChannels',
                    'recording_status_callback': 'RecordingStatusCallback',
                    'recording_status_callback_event': 'RecordingStatusCallbackEvent',
                    'recording_status_callback_method': 'RecordingStatusCallbackMethod',
                    'recording_track': 'RecordingTrack',
                    'region': 'Region',
                    'sip_auth_password': 'SipAuthPassword',
                    'sip_auth_username': 'SipAuthUsername',
                    'start_conference_on_enter': 'StartConferenceOnEnter',
                    'status_callback': 'StatusCallback',
                    'status_callback_event': 'StatusCallbackEvent',
                    'status_callback_method': 'StatusCallbackMethod',
                    'timeout': 'Timeout',
                    'wait_method': 'WaitMethod',
                    'wait_url': 'WaitUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    '_from': 'form',
                    'to': 'form',
                    'beep': 'form',
                    'byoc': 'form',
                    'call_reason': 'form',
                    'call_sid_to_coach': 'form',
                    'caller_id': 'form',
                    'coaching': 'form',
                    'conference_record': 'form',
                    'conference_recording_status_callback': 'form',
                    'conference_recording_status_callback_event': 'form',
                    'conference_recording_status_callback_method': 'form',
                    'conference_status_callback': 'form',
                    'conference_status_callback_event': 'form',
                    'conference_status_callback_method': 'form',
                    'conference_trim': 'form',
                    'early_media': 'form',
                    'end_conference_on_exit': 'form',
                    'jitter_buffer_size': 'form',
                    'label': 'form',
                    'max_participants': 'form',
                    'muted': 'form',
                    'record': 'form',
                    'recording_channels': 'form',
                    'recording_status_callback': 'form',
                    'recording_status_callback_event': 'form',
                    'recording_status_callback_method': 'form',
                    'recording_track': 'form',
                    'region': 'form',
                    'sip_auth_password': 'form',
                    'sip_auth_username': 'form',
                    'start_conference_on_enter': 'form',
                    'status_callback': 'form',
                    'status_callback_event': 'form',
                    'status_callback_method': 'form',
                    'timeout': 'form',
                    'wait_method': 'form',
                    'wait_url': 'form',
                },
                'collection_format_map': {
                    'conference_recording_status_callback_event': 'csv',
                    'conference_status_callback_event': 'csv',
                    'recording_status_callback_event': 'csv',
                    'status_callback_event': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_participant
        )

        def __create_payments(
            self,
            account_sid,
            call_sid,
            idempotency_key,
            status_callback,
            **kwargs
        ):
            """create_payments  # noqa: E501

            create an instance of payments. This will start a new payments session  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_payments(account_sid, call_sid, idempotency_key, status_callback, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                call_sid (str): The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
                idempotency_key (str): A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
                status_callback (str): Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)

            Keyword Args:
                bank_account_type (str): Type of bank account if payment source is ACH. One of `consumer-checking`, `consumer-savings`, or `commercial-checking`. The default value is `consumer-checking`.. [optional]
                charge_amount (float): A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.. [optional]
                currency (str): The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the <Pay> Connector are accepted.. [optional]
                description (str): The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.. [optional]
                input (str): A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.. [optional]
                min_postal_code_length (int): A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.. [optional]
                parameter ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): A single level JSON string that is required when accepting certain information specific only to ACH payments. The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).. [optional]
                payment_connector (str): This is the unique name corresponding to the Payment Gateway Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.. [optional]
                payment_method (str): Type of payment being captured. One of `credit-card` or `ach-debit`. The default value is `credit-card`.. [optional]
                postal_code (bool): Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.. [optional]
                security_code (bool): Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.. [optional]
                timeout (int): The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.. [optional]
                token_type (str): Indicates whether the payment method should be tokenized as a `one-time` or `reusable` token. The default value is `reusable`. Do not enter a charge amount when tokenizing. If a charge amount is entered, the payment method will be charged and not tokenized.. [optional]
                valid_card_types (str): Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallPayments
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['idempotency_key'] = \
                idempotency_key
            kwargs['status_callback'] = \
                status_callback
            return self.call_with_http_info(**kwargs)

        self.create_payments = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallPayments,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json',
                'operation_id': 'create_payments',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'idempotency_key',
                    'status_callback',
                    'bank_account_type',
                    'charge_amount',
                    'currency',
                    'description',
                    'input',
                    'min_postal_code_length',
                    'parameter',
                    'payment_connector',
                    'payment_method',
                    'postal_code',
                    'security_code',
                    'timeout',
                    'token_type',
                    'valid_card_types',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'idempotency_key',
                    'status_callback',
                ],
                'nullable': [
                ],
                'enum': [
                    'bank_account_type',
                    'payment_method',
                    'token_type',
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('bank_account_type',): {

                        "CONSUMER-CHECKING": "consumer-checking",
                        "CONSUMER-SAVINGS": "consumer-savings",
                        "COMMERCIAL-CHECKING": "commercial-checking"
                    },
                    ('payment_method',): {

                        "CREDIT-CARD": "credit-card",
                        "ACH-DEBIT": "ach-debit"
                    },
                    ('token_type',): {

                        "ONE-TIME": "one-time",
                        "REUSABLE": "reusable"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'idempotency_key':
                        (str,),
                    'status_callback':
                        (str,),
                    'bank_account_type':
                        (str,),
                    'charge_amount':
                        (float,),
                    'currency':
                        (str,),
                    'description':
                        (str,),
                    'input':
                        (str,),
                    'min_postal_code_length':
                        (int,),
                    'parameter':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'payment_connector':
                        (str,),
                    'payment_method':
                        (str,),
                    'postal_code':
                        (bool,),
                    'security_code':
                        (bool,),
                    'timeout':
                        (int,),
                    'token_type':
                        (str,),
                    'valid_card_types':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'idempotency_key': 'IdempotencyKey',
                    'status_callback': 'StatusCallback',
                    'bank_account_type': 'BankAccountType',
                    'charge_amount': 'ChargeAmount',
                    'currency': 'Currency',
                    'description': 'Description',
                    'input': 'Input',
                    'min_postal_code_length': 'MinPostalCodeLength',
                    'parameter': 'Parameter',
                    'payment_connector': 'PaymentConnector',
                    'payment_method': 'PaymentMethod',
                    'postal_code': 'PostalCode',
                    'security_code': 'SecurityCode',
                    'timeout': 'Timeout',
                    'token_type': 'TokenType',
                    'valid_card_types': 'ValidCardTypes',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'idempotency_key': 'form',
                    'status_callback': 'form',
                    'bank_account_type': 'form',
                    'charge_amount': 'form',
                    'currency': 'form',
                    'description': 'form',
                    'input': 'form',
                    'min_postal_code_length': 'form',
                    'parameter': 'form',
                    'payment_connector': 'form',
                    'payment_method': 'form',
                    'postal_code': 'form',
                    'security_code': 'form',
                    'timeout': 'form',
                    'token_type': 'form',
                    'valid_card_types': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_payments
        )

        def __create_queue(
            self,
            account_sid,
            friendly_name,
            **kwargs
        ):
            """create_queue  # noqa: E501

            Create a queue  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_queue(account_sid, friendly_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                friendly_name (str): A descriptive string that you created to describe this resource. It can be up to 64 characters long.

            Keyword Args:
                max_size (int): The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountQueue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['friendly_name'] = \
                friendly_name
            return self.call_with_http_info(**kwargs)

        self.create_queue = Endpoint(
            settings={
                'response_type': (ApiV2010AccountQueue,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues.json',
                'operation_id': 'create_queue',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                    'max_size',
                ],
                'required': [
                    'account_sid',
                    'friendly_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'max_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                    'max_size': 'MaxSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'form',
                    'max_size': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_queue
        )

        def __create_sip_auth_calls_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            credential_list_sid,
            **kwargs
        ):
            """create_sip_auth_calls_credential_list_mapping  # noqa: E501

            Create a new credential list mapping resource  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_auth_calls_credential_list_mapping(account_sid, domain_sid, credential_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                domain_sid (str): The SID of the SIP domain that will contain the new resource.
                credential_list_sid (str): The SID of the CredentialList resource to map to the SIP domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            return self.call_with_http_info(**kwargs)

        self.create_sip_auth_calls_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json',
                'operation_id': 'create_sip_auth_calls_credential_list_mapping',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'credential_list_sid': 'CredentialListSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'credential_list_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_auth_calls_credential_list_mapping
        )

        def __create_sip_auth_calls_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            ip_access_control_list_sid,
            **kwargs
        ):
            """create_sip_auth_calls_ip_access_control_list_mapping  # noqa: E501

            Create a new IP Access Control List mapping  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_auth_calls_ip_access_control_list_mapping(account_sid, domain_sid, ip_access_control_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                domain_sid (str): The SID of the SIP domain that will contain the new resource.
                ip_access_control_list_sid (str): The SID of the IpAccessControlList resource to map to the SIP domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            return self.call_with_http_info(**kwargs)

        self.create_sip_auth_calls_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json',
                'operation_id': 'create_sip_auth_calls_ip_access_control_list_mapping',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'ip_access_control_list_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_auth_calls_ip_access_control_list_mapping
        )

        def __create_sip_auth_registrations_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            credential_list_sid,
            **kwargs
        ):
            """create_sip_auth_registrations_credential_list_mapping  # noqa: E501

            Create a new credential list mapping resource  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_auth_registrations_credential_list_mapping(account_sid, domain_sid, credential_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                domain_sid (str): The SID of the SIP domain that will contain the new resource.
                credential_list_sid (str): The SID of the CredentialList resource to map to the SIP domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            return self.call_with_http_info(**kwargs)

        self.create_sip_auth_registrations_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json',
                'operation_id': 'create_sip_auth_registrations_credential_list_mapping',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'credential_list_sid': 'CredentialListSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'credential_list_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_auth_registrations_credential_list_mapping
        )

        def __create_sip_credential(
            self,
            account_sid,
            credential_list_sid,
            password,
            username,
            **kwargs
        ):
            """create_sip_credential  # noqa: E501

            Create a new credential resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_credential(account_sid, credential_list_sid, password, username, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                credential_list_sid (str): The unique id that identifies the credential list to include the created credential.
                password (str): The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
                username (str): The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialListSipCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            kwargs['password'] = \
                password
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.create_sip_credential = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialListSipCredential,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json',
                'operation_id': 'create_sip_credential',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'credential_list_sid',
                    'password',
                    'username',
                ],
                'required': [
                    'account_sid',
                    'credential_list_sid',
                    'password',
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'credential_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                    'password':
                        (str,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'credential_list_sid': 'CredentialListSid',
                    'password': 'Password',
                    'username': 'Username',
                },
                'location_map': {
                    'account_sid': 'path',
                    'credential_list_sid': 'path',
                    'password': 'form',
                    'username': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_credential
        )

        def __create_sip_credential_list(
            self,
            account_sid,
            friendly_name,
            **kwargs
        ):
            """create_sip_credential_list  # noqa: E501

            Create a Credential List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_credential_list(account_sid, friendly_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                friendly_name (str): A human readable descriptive text that describes the CredentialList, up to 64 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['friendly_name'] = \
                friendly_name
            return self.call_with_http_info(**kwargs)

        self.create_sip_credential_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json',
                'operation_id': 'create_sip_credential_list',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'friendly_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_credential_list
        )

        def __create_sip_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            credential_list_sid,
            **kwargs
        ):
            """create_sip_credential_list_mapping  # noqa: E501

            Create a CredentialListMapping resource for an account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_credential_list_mapping(account_sid, domain_sid, credential_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
                credential_list_sid (str): A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            return self.call_with_http_info(**kwargs)

        self.create_sip_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json',
                'operation_id': 'create_sip_credential_list_mapping',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'credential_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'credential_list_sid': 'CredentialListSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'credential_list_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_credential_list_mapping
        )

        def __create_sip_domain(
            self,
            account_sid,
            domain_name,
            **kwargs
        ):
            """create_sip_domain  # noqa: E501

            Create a new Domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_domain(account_sid, domain_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                domain_name (str): The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.

            Keyword Args:
                byoc_trunk_sid (str): The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.. [optional]
                emergency_caller_sid (str): Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.. [optional]
                emergency_calling_enabled (bool): Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.. [optional]
                friendly_name (str): A descriptive string that you created to describe the resource. It can be up to 64 characters long.. [optional]
                secure (bool): Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.. [optional]
                sip_registration (bool): Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.. [optional]
                voice_fallback_method (str): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.. [optional]
                voice_method (str): The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.. [optional]
                voice_status_callback_method (str): The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.. [optional]
                voice_status_callback_url (str): The URL that we should call to pass status parameters (such as call ended) to your application.. [optional]
                voice_url (str): The URL we should when the domain receives a call.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomain
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_name'] = \
                domain_name
            return self.call_with_http_info(**kwargs)

        self.create_sip_domain = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomain,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json',
                'operation_id': 'create_sip_domain',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_name',
                    'byoc_trunk_sid',
                    'emergency_caller_sid',
                    'emergency_calling_enabled',
                    'friendly_name',
                    'secure',
                    'sip_registration',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_status_callback_method',
                    'voice_status_callback_url',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'domain_name',
                ],
                'nullable': [
                ],
                'enum': [
                    'voice_fallback_method',
                    'voice_method',
                    'voice_status_callback_method',
                ],
                'validation': [
                    'account_sid',
                    'byoc_trunk_sid',
                    'emergency_caller_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('byoc_trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BY[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_caller_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_name':
                        (str,),
                    'byoc_trunk_sid':
                        (str,),
                    'emergency_caller_sid':
                        (str,),
                    'emergency_calling_enabled':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'secure':
                        (bool,),
                    'sip_registration':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_status_callback_method':
                        (str,),
                    'voice_status_callback_url':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_name': 'DomainName',
                    'byoc_trunk_sid': 'ByocTrunkSid',
                    'emergency_caller_sid': 'EmergencyCallerSid',
                    'emergency_calling_enabled': 'EmergencyCallingEnabled',
                    'friendly_name': 'FriendlyName',
                    'secure': 'Secure',
                    'sip_registration': 'SipRegistration',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_status_callback_method': 'VoiceStatusCallbackMethod',
                    'voice_status_callback_url': 'VoiceStatusCallbackUrl',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_name': 'form',
                    'byoc_trunk_sid': 'form',
                    'emergency_caller_sid': 'form',
                    'emergency_calling_enabled': 'form',
                    'friendly_name': 'form',
                    'secure': 'form',
                    'sip_registration': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_status_callback_method': 'form',
                    'voice_status_callback_url': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_domain
        )

        def __create_sip_ip_access_control_list(
            self,
            account_sid,
            friendly_name,
            **kwargs
        ):
            """create_sip_ip_access_control_list  # noqa: E501

            Create a new IpAccessControlList resource  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_ip_access_control_list(account_sid, friendly_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                friendly_name (str): A human readable descriptive text that describes the IpAccessControlList, up to 64 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['friendly_name'] = \
                friendly_name
            return self.call_with_http_info(**kwargs)

        self.create_sip_ip_access_control_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json',
                'operation_id': 'create_sip_ip_access_control_list',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'friendly_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_ip_access_control_list
        )

        def __create_sip_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            ip_access_control_list_sid,
            **kwargs
        ):
            """create_sip_ip_access_control_list_mapping  # noqa: E501

            Create a new IpAccessControlListMapping resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_ip_access_control_list_mapping(account_sid, domain_sid, ip_access_control_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP domain.
                ip_access_control_list_sid (str): The unique id of the IP access control list to map to the SIP domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            return self.call_with_http_info(**kwargs)

        self.create_sip_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipIpAccessControlListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json',
                'operation_id': 'create_sip_ip_access_control_list_mapping',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'ip_access_control_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'ip_access_control_list_sid': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_ip_access_control_list_mapping
        )

        def __create_sip_ip_address(
            self,
            account_sid,
            ip_access_control_list_sid,
            friendly_name,
            ip_address,
            **kwargs
        ):
            """create_sip_ip_address  # noqa: E501

            Create a new IpAddress resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_sip_ip_address(account_sid, ip_access_control_list_sid, friendly_name, ip_address, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                ip_access_control_list_sid (str): The IpAccessControlList Sid with which to associate the created IpAddress resource.
                friendly_name (str): A human readable descriptive text for this resource, up to 64 characters long.
                ip_address (str): An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.

            Keyword Args:
                cidr_prefix_length (int): An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlListSipIpAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            kwargs['friendly_name'] = \
                friendly_name
            kwargs['ip_address'] = \
                ip_address
            return self.call_with_http_info(**kwargs)

        self.create_sip_ip_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlListSipIpAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json',
                'operation_id': 'create_sip_ip_address',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'friendly_name',
                    'ip_address',
                    'cidr_prefix_length',
                ],
                'required': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'friendly_name',
                    'ip_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'ip_access_control_list_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'ip_address':
                        (str,),
                    'cidr_prefix_length':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                    'friendly_name': 'FriendlyName',
                    'ip_address': 'IpAddress',
                    'cidr_prefix_length': 'CidrPrefixLength',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ip_access_control_list_sid': 'path',
                    'friendly_name': 'form',
                    'ip_address': 'form',
                    'cidr_prefix_length': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_sip_ip_address
        )

        def __create_token(
            self,
            account_sid,
            **kwargs
        ):
            """create_token  # noqa: E501

            Create a new token for ICE servers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_token(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.

            Keyword Args:
                ttl (int): The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountToken
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.create_token = Endpoint(
            settings={
                'response_type': (ApiV2010AccountToken,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Tokens.json',
                'operation_id': 'create_token',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ttl',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ttl':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ttl': 'Ttl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ttl': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_token
        )

        def __create_usage_trigger(
            self,
            account_sid,
            callback_url,
            trigger_value,
            usage_category,
            **kwargs
        ):
            """create_usage_trigger  # noqa: E501

            Create a new UsageTrigger  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_usage_trigger(account_sid, callback_url, trigger_value, usage_category, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
                callback_url (str): The URL we should call using `callback_method` when the trigger fires.
                trigger_value (str): The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
                usage_category (str): The usage category that the trigger should watch.  Use one of the supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) for this value.

            Keyword Args:
                callback_method (str): The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.. [optional]
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                recurring (str): The frequency of a recurring UsageTrigger.  Can be: `daily`, `monthly`, or `yearly` for recurring triggers or empty for non-recurring triggers. A trigger will only fire once during each period. Recurring times are in GMT.. [optional]
                trigger_by (str): The field in the [UsageRecord](https://www.twilio.com/docs/usage/api/usage-record) resource that should fire the trigger.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).  The default is `usage`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountUsageUsageTrigger
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['callback_url'] = \
                callback_url
            kwargs['trigger_value'] = \
                trigger_value
            kwargs['usage_category'] = \
                usage_category
            return self.call_with_http_info(**kwargs)

        self.create_usage_trigger = Endpoint(
            settings={
                'response_type': (ApiV2010AccountUsageUsageTrigger,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json',
                'operation_id': 'create_usage_trigger',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'callback_url',
                    'trigger_value',
                    'usage_category',
                    'callback_method',
                    'friendly_name',
                    'recurring',
                    'trigger_by',
                ],
                'required': [
                    'account_sid',
                    'callback_url',
                    'trigger_value',
                    'usage_category',
                ],
                'nullable': [
                ],
                'enum': [
                    'usage_category',
                    'callback_method',
                    'recurring',
                    'trigger_by',
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('usage_category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                    ('callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('recurring',): {

                        "DAILY": "daily",
                        "MONTHLY": "monthly",
                        "YEARLY": "yearly",
                        "ALLTIME": "alltime"
                    },
                    ('trigger_by',): {

                        "COUNT": "count",
                        "USAGE": "usage",
                        "PRICE": "price"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'callback_url':
                        (str,),
                    'trigger_value':
                        (str,),
                    'usage_category':
                        (str,),
                    'callback_method':
                        (str,),
                    'friendly_name':
                        (str,),
                    'recurring':
                        (str,),
                    'trigger_by':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'callback_url': 'CallbackUrl',
                    'trigger_value': 'TriggerValue',
                    'usage_category': 'UsageCategory',
                    'callback_method': 'CallbackMethod',
                    'friendly_name': 'FriendlyName',
                    'recurring': 'Recurring',
                    'trigger_by': 'TriggerBy',
                },
                'location_map': {
                    'account_sid': 'path',
                    'callback_url': 'form',
                    'trigger_value': 'form',
                    'usage_category': 'form',
                    'callback_method': 'form',
                    'friendly_name': 'form',
                    'recurring': 'form',
                    'trigger_by': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_usage_trigger
        )

        def __create_validation_request(
            self,
            account_sid,
            phone_number,
            **kwargs
        ):
            """create_validation_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_validation_request(account_sid, phone_number, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
                phone_number (str): The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.

            Keyword Args:
                call_delay (int): The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.. [optional]
                extension (str): The digits to dial after connecting the verification call.. [optional]
                friendly_name (str): A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information about the verification process to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`, and the default is `POST`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountValidationRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['phone_number'] = \
                phone_number
            return self.call_with_http_info(**kwargs)

        self.create_validation_request = Endpoint(
            settings={
                'response_type': (ApiV2010AccountValidationRequest,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json',
                'operation_id': 'create_validation_request',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'phone_number',
                    'call_delay',
                    'extension',
                    'friendly_name',
                    'status_callback',
                    'status_callback_method',
                ],
                'required': [
                    'account_sid',
                    'phone_number',
                ],
                'nullable': [
                ],
                'enum': [
                    'status_callback_method',
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'call_delay':
                        (int,),
                    'extension':
                        (str,),
                    'friendly_name':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'phone_number': 'PhoneNumber',
                    'call_delay': 'CallDelay',
                    'extension': 'Extension',
                    'friendly_name': 'FriendlyName',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                },
                'location_map': {
                    'account_sid': 'path',
                    'phone_number': 'form',
                    'call_delay': 'form',
                    'extension': 'form',
                    'friendly_name': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_validation_request
        )

        def __delete_address(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_address(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Address resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_address = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json',
                'operation_id': 'delete_address',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_address
        )

        def __delete_application(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_application  # noqa: E501

            Delete the application by the specified application sid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_application(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Application resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_application = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json',
                'operation_id': 'delete_application',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_application
        )

        def __delete_call(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_call  # noqa: E501

            Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_call(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
                sid (str): The Twilio-provided Call SID that uniquely identifies the Call resource to delete

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_call = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json',
                'operation_id': 'delete_call',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_call
        )

        def __delete_call_feedback_summary(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_call_feedback_summary  # noqa: E501

            Delete a FeedbackSummary resource from a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_call_feedback_summary(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                sid (str): A 34 character string that uniquely identifies this resource.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_call_feedback_summary = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json',
                'operation_id': 'delete_call_feedback_summary',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^FS[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_call_feedback_summary
        )

        def __delete_call_recording(
            self,
            account_sid,
            call_sid,
            sid,
            **kwargs
        ):
            """delete_call_recording  # noqa: E501

            Delete a recording from your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_call_recording(account_sid, call_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Recording resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_call_recording = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json',
                'operation_id': 'delete_call_recording',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_call_recording
        )

        def __delete_conference_recording(
            self,
            account_sid,
            conference_sid,
            sid,
            **kwargs
        ):
            """delete_conference_recording  # noqa: E501

            Delete a recording from your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_conference_recording(account_sid, conference_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
                conference_sid (str): The Conference SID that identifies the conference associated with the recording to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_conference_recording = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json',
                'operation_id': 'delete_conference_recording',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_conference_recording
        )

        def __delete_connect_app(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_connect_app  # noqa: E501

            Delete an instance of a connect-app  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_connect_app(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_connect_app = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json',
                'operation_id': 'delete_connect_app',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_connect_app
        )

        def __delete_incoming_phone_number(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_incoming_phone_number  # noqa: E501

            Delete a phone-numbers belonging to the account used to make the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_incoming_phone_number(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_incoming_phone_number = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json',
                'operation_id': 'delete_incoming_phone_number',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_incoming_phone_number
        )

        def __delete_incoming_phone_number_assigned_add_on(
            self,
            account_sid,
            resource_sid,
            sid,
            **kwargs
        ):
            """delete_incoming_phone_number_assigned_add_on  # noqa: E501

            Remove the assignment of an Add-on installation from the Number specified.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_incoming_phone_number_assigned_add_on(account_sid, resource_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
                resource_sid (str): The SID of the Phone Number to which the Add-on is assigned.
                sid (str): The Twilio-provided string that uniquely identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_incoming_phone_number_assigned_add_on = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json',
                'operation_id': 'delete_incoming_phone_number_assigned_add_on',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_incoming_phone_number_assigned_add_on
        )

        def __delete_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Key resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_key = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json',
                'operation_id': 'delete_key',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_key
        )

        def __delete_media(
            self,
            account_sid,
            message_sid,
            sid,
            **kwargs
        ):
            """delete_media  # noqa: E501

            Delete media from your account. Once delete, you will no longer be billed  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_media(account_sid, message_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
                message_sid (str): The SID of the Message resource that this Media resource belongs to.
                sid (str): The Twilio-provided string that uniquely identifies the Media resource to delete

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['message_sid'] = \
                message_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_media = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json',
                'operation_id': 'delete_media',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('message_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^ME[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'message_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'message_sid': 'MessageSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'message_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_media
        )

        def __delete_message(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_message  # noqa: E501

            Deletes a message record from your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_message(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Message resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_message = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json',
                'operation_id': 'delete_message',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_message
        )

        def __delete_outgoing_caller_id(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_outgoing_caller_id  # noqa: E501

            Delete the caller-id specified from the account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_outgoing_caller_id(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_outgoing_caller_id = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json',
                'operation_id': 'delete_outgoing_caller_id',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_outgoing_caller_id
        )

        def __delete_participant(
            self,
            account_sid,
            conference_sid,
            call_sid,
            **kwargs
        ):
            """delete_participant  # noqa: E501

            Kick a participant from a given conference  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_participant(account_sid, conference_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
                conference_sid (str): The SID of the conference with the participants to delete.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.delete_participant = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json',
                'operation_id': 'delete_participant',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'call_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'call_sid': 'CallSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'call_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_participant
        )

        def __delete_queue(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_queue  # noqa: E501

            Remove an empty queue  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_queue(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Queue resource to delete

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_queue = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json',
                'operation_id': 'delete_queue',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_queue
        )

        def __delete_recording(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_recording  # noqa: E501

            Delete a recording from your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_recording(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Recording resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_recording = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json',
                'operation_id': 'delete_recording',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_recording
        )

        def __delete_recording_add_on_result(
            self,
            account_sid,
            reference_sid,
            sid,
            **kwargs
        ):
            """delete_recording_add_on_result  # noqa: E501

            Delete a result and purge all associated Payloads  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_recording_add_on_result(account_sid, reference_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
                reference_sid (str): The SID of the recording to which the result to delete belongs.
                sid (str): The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_recording_add_on_result = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json',
                'operation_id': 'delete_recording_add_on_result',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_recording_add_on_result
        )

        def __delete_recording_add_on_result_payload(
            self,
            account_sid,
            reference_sid,
            add_on_result_sid,
            sid,
            **kwargs
        ):
            """delete_recording_add_on_result_payload  # noqa: E501

            Delete a payload from the result along with all associated Data  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_recording_add_on_result_payload(account_sid, reference_sid, add_on_result_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
                reference_sid (str): The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
                add_on_result_sid (str): The SID of the AddOnResult to which the payloads to delete belongs.
                sid (str): The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            kwargs['add_on_result_sid'] = \
                add_on_result_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_recording_add_on_result_payload = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json',
                'operation_id': 'delete_recording_add_on_result_payload',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('add_on_result_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XH[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'add_on_result_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'add_on_result_sid': 'AddOnResultSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'add_on_result_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_recording_add_on_result_payload
        )

        def __delete_recording_transcription(
            self,
            account_sid,
            recording_sid,
            sid,
            **kwargs
        ):
            """delete_recording_transcription  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_recording_transcription(account_sid, recording_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
                recording_sid (str): The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Transcription resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['recording_sid'] = \
                recording_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_recording_transcription = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json',
                'operation_id': 'delete_recording_transcription',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('recording_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'recording_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'recording_sid': 'RecordingSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'recording_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_recording_transcription
        )

        def __delete_signing_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_signing_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_signing_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str):
                sid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_signing_key = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json',
                'operation_id': 'delete_signing_key',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_signing_key
        )

        def __delete_sip_auth_calls_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """delete_sip_auth_calls_credential_list_mapping  # noqa: E501

            Delete a credential list mapping from the requested domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_auth_calls_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
                domain_sid (str): The SID of the SIP domain that contains the resource to delete.
                sid (str): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_auth_calls_credential_list_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json',
                'operation_id': 'delete_sip_auth_calls_credential_list_mapping',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_auth_calls_credential_list_mapping
        )

        def __delete_sip_auth_calls_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """delete_sip_auth_calls_ip_access_control_list_mapping  # noqa: E501

            Delete an IP Access Control List mapping from the requested domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_auth_calls_ip_access_control_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
                domain_sid (str): The SID of the SIP domain that contains the resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_auth_calls_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json',
                'operation_id': 'delete_sip_auth_calls_ip_access_control_list_mapping',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_auth_calls_ip_access_control_list_mapping
        )

        def __delete_sip_auth_registrations_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """delete_sip_auth_registrations_credential_list_mapping  # noqa: E501

            Delete a credential list mapping from the requested domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_auth_registrations_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
                domain_sid (str): The SID of the SIP domain that contains the resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_auth_registrations_credential_list_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json',
                'operation_id': 'delete_sip_auth_registrations_credential_list_mapping',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_auth_registrations_credential_list_mapping
        )

        def __delete_sip_credential(
            self,
            account_sid,
            credential_list_sid,
            sid,
            **kwargs
        ):
            """delete_sip_credential  # noqa: E501

            Delete a credential resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_credential(account_sid, credential_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                credential_list_sid (str): The unique id that identifies the credential list that contains the desired credentials.
                sid (str): The unique id that identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_credential = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json',
                'operation_id': 'delete_sip_credential',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'credential_list_sid': 'CredentialListSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'credential_list_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_credential
        )

        def __delete_sip_credential_list(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_sip_credential_list  # noqa: E501

            Delete a Credential List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_credential_list(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                sid (str): The credential list Sid that uniquely identifies this resource

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_credential_list = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json',
                'operation_id': 'delete_sip_credential_list',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_credential_list
        )

        def __delete_sip_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """delete_sip_credential_list_mapping  # noqa: E501

            Delete a CredentialListMapping resource from an account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
                sid (str): A 34 character string that uniquely identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_credential_list_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json',
                'operation_id': 'delete_sip_credential_list_mapping',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_credential_list_mapping
        )

        def __delete_sip_domain(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_sip_domain  # noqa: E501

            Delete an instance of a Domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_domain(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the SipDomain resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_domain = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json',
                'operation_id': 'delete_sip_domain',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_domain
        )

        def __delete_sip_ip_access_control_list(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_sip_ip_access_control_list  # noqa: E501

            Delete an IpAccessControlList from the requested account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_ip_access_control_list(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                sid (str): A 34 character string that uniquely identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_ip_access_control_list = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json',
                'operation_id': 'delete_sip_ip_access_control_list',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_ip_access_control_list
        )

        def __delete_sip_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """delete_sip_ip_access_control_list_mapping  # noqa: E501

            Delete an IpAccessControlListMapping resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_ip_access_control_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP domain.
                sid (str): A 34 character string that uniquely identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json',
                'operation_id': 'delete_sip_ip_access_control_list_mapping',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_ip_access_control_list_mapping
        )

        def __delete_sip_ip_address(
            self,
            account_sid,
            ip_access_control_list_sid,
            sid,
            **kwargs
        ):
            """delete_sip_ip_address  # noqa: E501

            Delete an IpAddress resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sip_ip_address(account_sid, ip_access_control_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                ip_access_control_list_sid (str): The IpAccessControlList Sid that identifies the IpAddress resources to delete.
                sid (str): A 34 character string that uniquely identifies the resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_sip_ip_address = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json',
                'operation_id': 'delete_sip_ip_address',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^IP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ip_access_control_list_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sip_ip_address
        )

        def __delete_transcription(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_transcription  # noqa: E501

            Delete a transcription from the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_transcription(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the Transcription resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_transcription = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json',
                'operation_id': 'delete_transcription',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_transcription
        )

        def __delete_usage_trigger(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """delete_usage_trigger  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_usage_trigger(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
                sid (str): The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.delete_usage_trigger = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json',
                'operation_id': 'delete_usage_trigger',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^UT[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_usage_trigger
        )

        def __fetch_account(
            self,
            sid,
            **kwargs
        ):
            """fetch_account  # noqa: E501

            Fetch the account specified by the provided Account Sid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_account(sid, async_req=True)
            >>> result = thread.get()

            Args:
                sid (str): The Account Sid that uniquely identifies the account to fetch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010Account
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_account = Endpoint(
            settings={
                'response_type': (ApiV2010Account,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{Sid}.json',
                'operation_id': 'fetch_account',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'sid',
                ],
                'required': [
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'sid': 'Sid',
                },
                'location_map': {
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_account
        )

        def __fetch_address(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_address(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Address resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json',
                'operation_id': 'fetch_address',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_address
        )

        def __fetch_application(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_application  # noqa: E501

            Fetch the application specified by the provided sid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_application(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Application resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountApplication
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_application = Endpoint(
            settings={
                'response_type': (ApiV2010AccountApplication,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json',
                'operation_id': 'fetch_application',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_application
        )

        def __fetch_authorized_connect_app(
            self,
            account_sid,
            connect_app_sid,
            **kwargs
        ):
            """fetch_authorized_connect_app  # noqa: E501

            Fetch an instance of an authorized-connect-app  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_authorized_connect_app(account_sid, connect_app_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
                connect_app_sid (str): The SID of the Connect App to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountAuthorizedConnectApp
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['connect_app_sid'] = \
                connect_app_sid
            return self.call_with_http_info(**kwargs)

        self.fetch_authorized_connect_app = Endpoint(
            settings={
                'response_type': (ApiV2010AccountAuthorizedConnectApp,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json',
                'operation_id': 'fetch_authorized_connect_app',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'connect_app_sid',
                ],
                'required': [
                    'account_sid',
                    'connect_app_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'connect_app_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('connect_app_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'connect_app_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'connect_app_sid': 'ConnectAppSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'connect_app_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_authorized_connect_app
        )

        def __fetch_available_phone_number_country(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """fetch_available_phone_number_country  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_available_phone_number_country(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountAvailablePhoneNumberCountry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.fetch_available_phone_number_country = Endpoint(
            settings={
                'response_type': (ApiV2010AccountAvailablePhoneNumberCountry,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json',
                'operation_id': 'fetch_available_phone_number_country',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_available_phone_number_country
        )

        def __fetch_balance(
            self,
            account_sid,
            **kwargs
        ):
            """fetch_balance  # noqa: E501

            Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_balance(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique SID identifier of the Account.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountBalance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.fetch_balance = Endpoint(
            settings={
                'response_type': (ApiV2010AccountBalance,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Balance.json',
                'operation_id': 'fetch_balance',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                },
                'location_map': {
                    'account_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_balance
        )

        def __fetch_call(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_call  # noqa: E501

            Fetch the call specified by the provided Call SID  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_call(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
                sid (str): The SID of the Call resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCall
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_call = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCall,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json',
                'operation_id': 'fetch_call',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_call
        )

        def __fetch_call_feedback(
            self,
            account_sid,
            call_sid,
            **kwargs
        ):
            """fetch_call_feedback  # noqa: E501

            Fetch a Feedback resource from a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_call_feedback(account_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                call_sid (str): The call sid that uniquely identifies the call

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallFeedback
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.fetch_call_feedback = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallFeedback,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json',
                'operation_id': 'fetch_call_feedback',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_call_feedback
        )

        def __fetch_call_feedback_summary(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_call_feedback_summary  # noqa: E501

            Fetch a FeedbackSummary resource from a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_call_feedback_summary(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                sid (str): A 34 character string that uniquely identifies this resource.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallFeedbackSummary
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_call_feedback_summary = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallFeedbackSummary,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json',
                'operation_id': 'fetch_call_feedback_summary',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^FS[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_call_feedback_summary
        )

        def __fetch_call_notification(
            self,
            account_sid,
            call_sid,
            sid,
            **kwargs
        ):
            """fetch_call_notification  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_call_notification(account_sid, call_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallNotificationInstance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_call_notification = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallNotificationInstance,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json',
                'operation_id': 'fetch_call_notification',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^NO[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_call_notification
        )

        def __fetch_call_recording(
            self,
            account_sid,
            call_sid,
            sid,
            **kwargs
        ):
            """fetch_call_recording  # noqa: E501

            Fetch an instance of a recording for a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_call_recording(account_sid, call_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Recording resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_call_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json',
                'operation_id': 'fetch_call_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_call_recording
        )

        def __fetch_conference(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_conference  # noqa: E501

            Fetch an instance of a conference  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_conference(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Conference resource to fetch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_conference = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConference,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json',
                'operation_id': 'fetch_conference',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_conference
        )

        def __fetch_conference_recording(
            self,
            account_sid,
            conference_sid,
            sid,
            **kwargs
        ):
            """fetch_conference_recording  # noqa: E501

            Fetch an instance of a recording for a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_conference_recording(account_sid, conference_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
                conference_sid (str): The Conference SID that identifies the conference associated with the recording to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConferenceConferenceRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_conference_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConferenceConferenceRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json',
                'operation_id': 'fetch_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_conference_recording
        )

        def __fetch_connect_app(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_connect_app  # noqa: E501

            Fetch an instance of a connect-app  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_connect_app(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConnectApp
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_connect_app = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConnectApp,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json',
                'operation_id': 'fetch_connect_app',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_connect_app
        )

        def __fetch_incoming_phone_number(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_incoming_phone_number  # noqa: E501

            Fetch an incoming-phone-number belonging to the account used to make the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_incoming_phone_number(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumber
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_incoming_phone_number = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumber,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json',
                'operation_id': 'fetch_incoming_phone_number',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_incoming_phone_number
        )

        def __fetch_incoming_phone_number_assigned_add_on(
            self,
            account_sid,
            resource_sid,
            sid,
            **kwargs
        ):
            """fetch_incoming_phone_number_assigned_add_on  # noqa: E501

            Fetch an instance of an Add-on installation currently assigned to this Number.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_incoming_phone_number_assigned_add_on(account_sid, resource_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
                resource_sid (str): The SID of the Phone Number to which the Add-on is assigned.
                sid (str): The Twilio-provided string that uniquely identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_incoming_phone_number_assigned_add_on = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json',
                'operation_id': 'fetch_incoming_phone_number_assigned_add_on',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_incoming_phone_number_assigned_add_on
        )

        def __fetch_incoming_phone_number_assigned_add_on_extension(
            self,
            account_sid,
            resource_sid,
            assigned_add_on_sid,
            sid,
            **kwargs
        ):
            """fetch_incoming_phone_number_assigned_add_on_extension  # noqa: E501

            Fetch an instance of an Extension for the Assigned Add-on.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_incoming_phone_number_assigned_add_on_extension(account_sid, resource_sid, assigned_add_on_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
                resource_sid (str): The SID of the Phone Number to which the Add-on is assigned.
                assigned_add_on_sid (str): The SID that uniquely identifies the assigned Add-on installation.
                sid (str): The Twilio-provided string that uniquely identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            kwargs['assigned_add_on_sid'] = \
                assigned_add_on_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_incoming_phone_number_assigned_add_on_extension = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json',
                'operation_id': 'fetch_incoming_phone_number_assigned_add_on_extension',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('assigned_add_on_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'assigned_add_on_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'assigned_add_on_sid': 'AssignedAddOnSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'assigned_add_on_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_incoming_phone_number_assigned_add_on_extension
        )

        def __fetch_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Key resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json',
                'operation_id': 'fetch_key',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_key
        )

        def __fetch_media(
            self,
            account_sid,
            message_sid,
            sid,
            **kwargs
        ):
            """fetch_media  # noqa: E501

            Fetch a single media instance belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_media(account_sid, message_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
                message_sid (str): The SID of the Message resource that this Media resource belongs to.
                sid (str): The Twilio-provided string that uniquely identifies the Media resource to fetch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountMessageMedia
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['message_sid'] = \
                message_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_media = Endpoint(
            settings={
                'response_type': (ApiV2010AccountMessageMedia,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json',
                'operation_id': 'fetch_media',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'message_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('message_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^ME[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'message_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'message_sid': 'MessageSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'message_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_media
        )

        def __fetch_member(
            self,
            account_sid,
            queue_sid,
            call_sid,
            **kwargs
        ):
            """fetch_member  # noqa: E501

            Fetch a specific member from the queue  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_member(account_sid, queue_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
                queue_sid (str): The SID of the Queue in which to find the members to fetch.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountQueueMember
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['queue_sid'] = \
                queue_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.fetch_member = Endpoint(
            settings={
                'response_type': (ApiV2010AccountQueueMember,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json',
                'operation_id': 'fetch_member',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'queue_sid',
                    'call_sid',
                ],
                'required': [
                    'account_sid',
                    'queue_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'queue_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('queue_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'queue_sid':
                        (str,),
                    'call_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'queue_sid': 'QueueSid',
                    'call_sid': 'CallSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'queue_sid': 'path',
                    'call_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_member
        )

        def __fetch_message(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_message  # noqa: E501

            Fetch a message belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_message(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Message resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountMessage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_message = Endpoint(
            settings={
                'response_type': (ApiV2010AccountMessage,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json',
                'operation_id': 'fetch_message',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_message
        )

        def __fetch_notification(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_notification  # noqa: E501

            Fetch a notification belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_notification(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Notification resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountNotificationInstance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_notification = Endpoint(
            settings={
                'response_type': (ApiV2010AccountNotificationInstance,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json',
                'operation_id': 'fetch_notification',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^NO[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_notification
        )

        def __fetch_outgoing_caller_id(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_outgoing_caller_id  # noqa: E501

            Fetch an outgoing-caller-id belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_outgoing_caller_id(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountOutgoingCallerId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_outgoing_caller_id = Endpoint(
            settings={
                'response_type': (ApiV2010AccountOutgoingCallerId,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json',
                'operation_id': 'fetch_outgoing_caller_id',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_outgoing_caller_id
        )

        def __fetch_participant(
            self,
            account_sid,
            conference_sid,
            call_sid,
            **kwargs
        ):
            """fetch_participant  # noqa: E501

            Fetch an instance of a participant  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_participant(account_sid, conference_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
                conference_sid (str): The SID of the conference with the participant to fetch.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConferenceParticipant
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.fetch_participant = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConferenceParticipant,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json',
                'operation_id': 'fetch_participant',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'call_sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'call_sid': 'CallSid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'call_sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_participant
        )

        def __fetch_queue(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_queue  # noqa: E501

            Fetch an instance of a queue identified by the QueueSid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_queue(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Queue resource to fetch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountQueue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_queue = Endpoint(
            settings={
                'response_type': (ApiV2010AccountQueue,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json',
                'operation_id': 'fetch_queue',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_queue
        )

        def __fetch_recording(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_recording  # noqa: E501

            Fetch an instance of a recording  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_recording(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Recording resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json',
                'operation_id': 'fetch_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_recording
        )

        def __fetch_recording_add_on_result(
            self,
            account_sid,
            reference_sid,
            sid,
            **kwargs
        ):
            """fetch_recording_add_on_result  # noqa: E501

            Fetch an instance of an AddOnResult  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_recording_add_on_result(account_sid, reference_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
                reference_sid (str): The SID of the recording to which the result to fetch belongs.
                sid (str): The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountRecordingRecordingAddOnResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_recording_add_on_result = Endpoint(
            settings={
                'response_type': (ApiV2010AccountRecordingRecordingAddOnResult,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json',
                'operation_id': 'fetch_recording_add_on_result',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_recording_add_on_result
        )

        def __fetch_recording_add_on_result_payload(
            self,
            account_sid,
            reference_sid,
            add_on_result_sid,
            sid,
            **kwargs
        ):
            """fetch_recording_add_on_result_payload  # noqa: E501

            Fetch an instance of a result payload  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_recording_add_on_result_payload(account_sid, reference_sid, add_on_result_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
                reference_sid (str): The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
                add_on_result_sid (str): The SID of the AddOnResult to which the payload to fetch belongs.
                sid (str): The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            kwargs['add_on_result_sid'] = \
                add_on_result_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_recording_add_on_result_payload = Endpoint(
            settings={
                'response_type': (ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json',
                'operation_id': 'fetch_recording_add_on_result_payload',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('add_on_result_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XH[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'add_on_result_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'add_on_result_sid': 'AddOnResultSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'add_on_result_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_recording_add_on_result_payload
        )

        def __fetch_recording_transcription(
            self,
            account_sid,
            recording_sid,
            sid,
            **kwargs
        ):
            """fetch_recording_transcription  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_recording_transcription(account_sid, recording_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
                recording_sid (str): The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Transcription resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountRecordingRecordingTranscription
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['recording_sid'] = \
                recording_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_recording_transcription = Endpoint(
            settings={
                'response_type': (ApiV2010AccountRecordingRecordingTranscription,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json',
                'operation_id': 'fetch_recording_transcription',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'recording_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('recording_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'recording_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'recording_sid': 'RecordingSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'recording_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_recording_transcription
        )

        def __fetch_short_code(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_short_code  # noqa: E501

            Fetch an instance of a short code  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_short_code(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the ShortCode resource to fetch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountShortCode
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_short_code = Endpoint(
            settings={
                'response_type': (ApiV2010AccountShortCode,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json',
                'operation_id': 'fetch_short_code',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_short_code
        )

        def __fetch_signing_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_signing_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_signing_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str):
                sid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSigningKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_signing_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSigningKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json',
                'operation_id': 'fetch_signing_key',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_signing_key
        )

        def __fetch_sip_auth_calls_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_auth_calls_credential_list_mapping  # noqa: E501

            Fetch a specific instance of a credential list mapping  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_auth_calls_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
                domain_sid (str): The SID of the SIP domain that contains the resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_auth_calls_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json',
                'operation_id': 'fetch_sip_auth_calls_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_auth_calls_credential_list_mapping
        )

        def __fetch_sip_auth_calls_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_auth_calls_ip_access_control_list_mapping  # noqa: E501

            Fetch a specific instance of an IP Access Control List mapping  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_auth_calls_ip_access_control_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
                domain_sid (str): The SID of the SIP domain that contains the resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_auth_calls_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json',
                'operation_id': 'fetch_sip_auth_calls_ip_access_control_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_auth_calls_ip_access_control_list_mapping
        )

        def __fetch_sip_auth_registrations_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_auth_registrations_credential_list_mapping  # noqa: E501

            Fetch a specific instance of a credential list mapping  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_auth_registrations_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
                domain_sid (str): The SID of the SIP domain that contains the resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_auth_registrations_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json',
                'operation_id': 'fetch_sip_auth_registrations_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_auth_registrations_credential_list_mapping
        )

        def __fetch_sip_credential(
            self,
            account_sid,
            credential_list_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_credential  # noqa: E501

            Fetch a single credential.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_credential(account_sid, credential_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                credential_list_sid (str): The unique id that identifies the credential list that contains the desired credential.
                sid (str): The unique id that identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialListSipCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_credential = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialListSipCredential,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json',
                'operation_id': 'fetch_sip_credential',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'credential_list_sid': 'CredentialListSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'credential_list_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_credential
        )

        def __fetch_sip_credential_list(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_credential_list  # noqa: E501

            Get a Credential List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_credential_list(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                sid (str): The credential list Sid that uniquely identifies this resource

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_credential_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json',
                'operation_id': 'fetch_sip_credential_list',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_credential_list
        )

        def __fetch_sip_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_credential_list_mapping  # noqa: E501

            Fetch a single CredentialListMapping resource from an account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_credential_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
                sid (str): A 34 character string that uniquely identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipCredentialListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_credential_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipCredentialListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json',
                'operation_id': 'fetch_sip_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_credential_list_mapping
        )

        def __fetch_sip_domain(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_domain  # noqa: E501

            Fetch an instance of a Domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_domain(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomain
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_domain = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomain,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json',
                'operation_id': 'fetch_sip_domain',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_domain
        )

        def __fetch_sip_ip_access_control_list(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_ip_access_control_list  # noqa: E501

            Fetch a specific instance of an IpAccessControlList  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_ip_access_control_list(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                sid (str): A 34 character string that uniquely identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_ip_access_control_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json',
                'operation_id': 'fetch_sip_ip_access_control_list',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_ip_access_control_list
        )

        def __fetch_sip_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_ip_access_control_list_mapping  # noqa: E501

            Fetch an IpAccessControlListMapping resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_ip_access_control_list_mapping(account_sid, domain_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP domain.
                sid (str): A 34 character string that uniquely identifies the resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomainSipIpAccessControlListMapping,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json',
                'operation_id': 'fetch_sip_ip_access_control_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_ip_access_control_list_mapping
        )

        def __fetch_sip_ip_address(
            self,
            account_sid,
            ip_access_control_list_sid,
            sid,
            **kwargs
        ):
            """fetch_sip_ip_address  # noqa: E501

            Read one IpAddress resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_sip_ip_address(account_sid, ip_access_control_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                ip_access_control_list_sid (str): The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
                sid (str): A 34 character string that uniquely identifies the IpAddress resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlListSipIpAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_sip_ip_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlListSipIpAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json',
                'operation_id': 'fetch_sip_ip_address',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^IP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ip_access_control_list_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_sip_ip_address
        )

        def __fetch_transcription(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_transcription  # noqa: E501

            Fetch an instance of a Transcription  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_transcription(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the Transcription resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountTranscription
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_transcription = Endpoint(
            settings={
                'response_type': (ApiV2010AccountTranscription,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json',
                'operation_id': 'fetch_transcription',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_transcription
        )

        def __fetch_usage_trigger(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """fetch_usage_trigger  # noqa: E501

            Fetch and instance of a usage-trigger  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_usage_trigger(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
                sid (str): The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountUsageUsageTrigger
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.fetch_usage_trigger = Endpoint(
            settings={
                'response_type': (ApiV2010AccountUsageUsageTrigger,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json',
                'operation_id': 'fetch_usage_trigger',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^UT[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_usage_trigger
        )

        def __list_account(
            self,
            **kwargs
        ):
            """list_account  # noqa: E501

            Retrieves a collection of Accounts belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_account(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                friendly_name (str): Only return the Account resources with friendly names that exactly match this name.. [optional]
                status (str): Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_account = Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts.json',
                'operation_id': 'list_account',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'friendly_name',
                    'status',
                    'page_size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "ACTIVE": "active",
                        "SUSPENDED": "suspended",
                        "CLOSED": "closed"
                    },
                },
                'openapi_types': {
                    'friendly_name':
                        (str,),
                    'status':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'friendly_name': 'FriendlyName',
                    'status': 'Status',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'friendly_name': 'query',
                    'status': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_account
        )

        def __list_address(
            self,
            account_sid,
            **kwargs
        ):
            """list_address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_address(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.

            Keyword Args:
                customer_name (str): The `customer_name` of the Address resources to read.. [optional]
                friendly_name (str): The string that identifies the Address resources to read.. [optional]
                iso_country (str): The ISO country code of the Address resources to read.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2001
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_address = Endpoint(
            settings={
                'response_type': (InlineResponse2001,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses.json',
                'operation_id': 'list_address',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'customer_name',
                    'friendly_name',
                    'iso_country',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'customer_name':
                        (str,),
                    'friendly_name':
                        (str,),
                    'iso_country':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'customer_name': 'CustomerName',
                    'friendly_name': 'FriendlyName',
                    'iso_country': 'IsoCountry',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'customer_name': 'query',
                    'friendly_name': 'query',
                    'iso_country': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_address
        )

        def __list_application(
            self,
            account_sid,
            **kwargs
        ):
            """list_application  # noqa: E501

            Retrieve a list of applications representing an application within the requesting account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_application(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.

            Keyword Args:
                friendly_name (str): The string that identifies the Application resources to read.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2003
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_application = Endpoint(
            settings={
                'response_type': (InlineResponse2003,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Applications.json',
                'operation_id': 'list_application',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_application
        )

        def __list_authorized_connect_app(
            self,
            account_sid,
            **kwargs
        ):
            """list_authorized_connect_app  # noqa: E501

            Retrieve a list of authorized-connect-apps belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_authorized_connect_app(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2004
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_authorized_connect_app = Endpoint(
            settings={
                'response_type': (InlineResponse2004,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json',
                'operation_id': 'list_authorized_connect_app',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_authorized_connect_app
        )

        def __list_available_phone_number_country(
            self,
            account_sid,
            **kwargs
        ):
            """list_available_phone_number_country  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_country(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2005
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_country = Endpoint(
            settings={
                'response_type': (InlineResponse2005,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json',
                'operation_id': 'list_available_phone_number_country',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_country
        )

        def __list_available_phone_number_local(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_local  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_local(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2006
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_local = Endpoint(
            settings={
                'response_type': (InlineResponse2006,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json',
                'operation_id': 'list_available_phone_number_local',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_local
        )

        def __list_available_phone_number_machine_to_machine(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_machine_to_machine  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_machine_to_machine(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2007
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_machine_to_machine = Endpoint(
            settings={
                'response_type': (InlineResponse2007,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json',
                'operation_id': 'list_available_phone_number_machine_to_machine',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_machine_to_machine
        )

        def __list_available_phone_number_mobile(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_mobile  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_mobile(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2008
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_mobile = Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json',
                'operation_id': 'list_available_phone_number_mobile',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_mobile
        )

        def __list_available_phone_number_national(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_national  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_national(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2009
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_national = Endpoint(
            settings={
                'response_type': (InlineResponse2009,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json',
                'operation_id': 'list_available_phone_number_national',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_national
        )

        def __list_available_phone_number_shared_cost(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_shared_cost  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_shared_cost(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20010
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_shared_cost = Endpoint(
            settings={
                'response_type': (InlineResponse20010,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json',
                'operation_id': 'list_available_phone_number_shared_cost',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_shared_cost
        )

        def __list_available_phone_number_toll_free(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_toll_free  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_toll_free(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20011
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_toll_free = Endpoint(
            settings={
                'response_type': (InlineResponse20011,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json',
                'operation_id': 'list_available_phone_number_toll_free',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_toll_free
        )

        def __list_available_phone_number_voip(
            self,
            account_sid,
            country_code,
            **kwargs
        ):
            """list_available_phone_number_voip  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_available_phone_number_voip(account_sid, country_code, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
                country_code (str): The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.

            Keyword Args:
                area_code (int): The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.. [optional]
                contains (str): The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.. [optional]
                sms_enabled (bool): Whether the phone numbers can receive text messages. Can be: `true` or `false`.. [optional]
                mms_enabled (bool): Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.. [optional]
                voice_enabled (bool): Whether the phone numbers can receive calls. Can be: `true` or `false`.. [optional]
                exclude_all_address_required (bool): Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_local_address_required (bool): Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                exclude_foreign_address_required (bool): Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.. [optional]
                beta (bool): Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                near_number (str): Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.. [optional]
                near_lat_long (str): Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.. [optional]
                distance (int): The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.. [optional]
                in_postal_code (str): Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_region (str): Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_rate_center (str): Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.. [optional]
                in_lata (str): Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.. [optional]
                in_locality (str): Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.. [optional]
                fax_enabled (bool): Whether the phone numbers can receive faxes. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20012
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.list_available_phone_number_voip = Endpoint(
            settings={
                'response_type': (InlineResponse20012,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json',
                'operation_id': 'list_available_phone_number_voip',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'country_code',
                    'area_code',
                    'contains',
                    'sms_enabled',
                    'mms_enabled',
                    'voice_enabled',
                    'exclude_all_address_required',
                    'exclude_local_address_required',
                    'exclude_foreign_address_required',
                    'beta',
                    'near_number',
                    'near_lat_long',
                    'distance',
                    'in_postal_code',
                    'in_region',
                    'in_rate_center',
                    'in_lata',
                    'in_locality',
                    'fax_enabled',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'country_code':
                        (str,),
                    'area_code':
                        (int,),
                    'contains':
                        (str,),
                    'sms_enabled':
                        (bool,),
                    'mms_enabled':
                        (bool,),
                    'voice_enabled':
                        (bool,),
                    'exclude_all_address_required':
                        (bool,),
                    'exclude_local_address_required':
                        (bool,),
                    'exclude_foreign_address_required':
                        (bool,),
                    'beta':
                        (bool,),
                    'near_number':
                        (str,),
                    'near_lat_long':
                        (str,),
                    'distance':
                        (int,),
                    'in_postal_code':
                        (str,),
                    'in_region':
                        (str,),
                    'in_rate_center':
                        (str,),
                    'in_lata':
                        (str,),
                    'in_locality':
                        (str,),
                    'fax_enabled':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'country_code': 'CountryCode',
                    'area_code': 'AreaCode',
                    'contains': 'Contains',
                    'sms_enabled': 'SmsEnabled',
                    'mms_enabled': 'MmsEnabled',
                    'voice_enabled': 'VoiceEnabled',
                    'exclude_all_address_required': 'ExcludeAllAddressRequired',
                    'exclude_local_address_required': 'ExcludeLocalAddressRequired',
                    'exclude_foreign_address_required': 'ExcludeForeignAddressRequired',
                    'beta': 'Beta',
                    'near_number': 'NearNumber',
                    'near_lat_long': 'NearLatLong',
                    'distance': 'Distance',
                    'in_postal_code': 'InPostalCode',
                    'in_region': 'InRegion',
                    'in_rate_center': 'InRateCenter',
                    'in_lata': 'InLata',
                    'in_locality': 'InLocality',
                    'fax_enabled': 'FaxEnabled',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'country_code': 'path',
                    'area_code': 'query',
                    'contains': 'query',
                    'sms_enabled': 'query',
                    'mms_enabled': 'query',
                    'voice_enabled': 'query',
                    'exclude_all_address_required': 'query',
                    'exclude_local_address_required': 'query',
                    'exclude_foreign_address_required': 'query',
                    'beta': 'query',
                    'near_number': 'query',
                    'near_lat_long': 'query',
                    'distance': 'query',
                    'in_postal_code': 'query',
                    'in_region': 'query',
                    'in_rate_center': 'query',
                    'in_lata': 'query',
                    'in_locality': 'query',
                    'fax_enabled': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_available_phone_number_voip
        )

        def __list_call(
            self,
            account_sid,
            **kwargs
        ):
            """list_call  # noqa: E501

            Retrieves a collection of calls made to and from your account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_call(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.

            Keyword Args:
                to (str): Only show calls made to this phone number, SIP address, Client identifier or SIM SID.. [optional]
                _from (str): Only include calls from this phone number, SIP address, Client identifier or SIM SID.. [optional]
                parent_call_sid (str): Only include calls spawned by calls with this SID.. [optional]
                status (str): The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.. [optional]
                start_time (datetime): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.. [optional]
                start_time2 (datetime): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.. [optional]
                start_time2 (datetime): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.. [optional]
                end_time (datetime): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.. [optional]
                end_time2 (datetime): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.. [optional]
                end_time2 (datetime): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20013
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_call = Endpoint(
            settings={
                'response_type': (InlineResponse20013,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls.json',
                'operation_id': 'list_call',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'to',
                    '_from',
                    'parent_call_sid',
                    'status',
                    'start_time',
                    'start_time2',
                    'start_time2',
                    'end_time',
                    'end_time2',
                    'end_time2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'account_sid',
                    'parent_call_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('parent_call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "QUEUED": "queued",
                        "RINGING": "ringing",
                        "IN-PROGRESS": "in-progress",
                        "COMPLETED": "completed",
                        "BUSY": "busy",
                        "FAILED": "failed",
                        "NO-ANSWER": "no-answer",
                        "CANCELED": "canceled"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'to':
                        (str,),
                    '_from':
                        (str,),
                    'parent_call_sid':
                        (str,),
                    'status':
                        (str,),
                    'start_time':
                        (datetime,),
                    'start_time2':
                        (datetime,),
                    'start_time2':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'end_time2':
                        (datetime,),
                    'end_time2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'to': 'To',
                    '_from': 'From',
                    'parent_call_sid': 'ParentCallSid',
                    'status': 'Status',
                    'start_time': 'StartTime',
                    'start_time2': 'StartTime&lt;',
                    'start_time2': 'StartTime&gt;',
                    'end_time': 'EndTime',
                    'end_time2': 'EndTime&lt;',
                    'end_time2': 'EndTime&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'to': 'query',
                    '_from': 'query',
                    'parent_call_sid': 'query',
                    'status': 'query',
                    'start_time': 'query',
                    'start_time2': 'query',
                    'start_time2': 'query',
                    'end_time': 'query',
                    'end_time2': 'query',
                    'end_time2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_call
        )

        def __list_call_event(
            self,
            account_sid,
            call_sid,
            **kwargs
        ):
            """list_call_event  # noqa: E501

            Retrieve a list of all events for a call.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_call_event(account_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique SID identifier of the Account.
                call_sid (str): The unique SID identifier of the Call.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20014
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.list_call_event = Endpoint(
            settings={
                'response_type': (InlineResponse20014,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json',
                'operation_id': 'list_call_event',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_call_event
        )

        def __list_call_notification(
            self,
            account_sid,
            call_sid,
            **kwargs
        ):
            """list_call_notification  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_call_notification(account_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.

            Keyword Args:
                log (int): Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.. [optional]
                message_date (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                message_date2 (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                message_date2 (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20015
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.list_call_notification = Endpoint(
            settings={
                'response_type': (InlineResponse20015,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json',
                'operation_id': 'list_call_notification',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'log',
                    'message_date',
                    'message_date2',
                    'message_date2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'log':
                        (int,),
                    'message_date':
                        (datetime,),
                    'message_date2':
                        (datetime,),
                    'message_date2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'log': 'Log',
                    'message_date': 'MessageDate',
                    'message_date2': 'MessageDate&lt;',
                    'message_date2': 'MessageDate&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'log': 'query',
                    'message_date': 'query',
                    'message_date2': 'query',
                    'message_date2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_call_notification
        )

        def __list_call_recording(
            self,
            account_sid,
            call_sid,
            **kwargs
        ):
            """list_call_recording  # noqa: E501

            Retrieve a list of recordings belonging to the call used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_call_recording(account_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.

            Keyword Args:
                date_created (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20016
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.list_call_recording = Endpoint(
            settings={
                'response_type': (InlineResponse20016,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json',
                'operation_id': 'list_call_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'date_created',
                    'date_created2',
                    'date_created2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'date_created':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'date_created': 'DateCreated',
                    'date_created2': 'DateCreated&lt;',
                    'date_created2': 'DateCreated&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'date_created': 'query',
                    'date_created2': 'query',
                    'date_created2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_call_recording
        )

        def __list_conference(
            self,
            account_sid,
            **kwargs
        ):
            """list_conference  # noqa: E501

            Retrieve a list of conferences belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_conference(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.

            Keyword Args:
                date_created (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.. [optional]
                date_updated (datetime): The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.. [optional]
                date_updated2 (datetime): The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.. [optional]
                date_updated2 (datetime): The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.. [optional]
                friendly_name (str): The string that identifies the Conference resources to read.. [optional]
                status (str): The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20017
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_conference = Endpoint(
            settings={
                'response_type': (InlineResponse20017,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences.json',
                'operation_id': 'list_conference',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'date_created',
                    'date_created2',
                    'date_created2',
                    'date_updated',
                    'date_updated2',
                    'date_updated2',
                    'friendly_name',
                    'status',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "INIT": "init",
                        "IN-PROGRESS": "in-progress",
                        "COMPLETED": "completed"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'date_created':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_updated':
                        (datetime,),
                    'date_updated2':
                        (datetime,),
                    'date_updated2':
                        (datetime,),
                    'friendly_name':
                        (str,),
                    'status':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'date_created': 'DateCreated',
                    'date_created2': 'DateCreated&lt;',
                    'date_created2': 'DateCreated&gt;',
                    'date_updated': 'DateUpdated',
                    'date_updated2': 'DateUpdated&lt;',
                    'date_updated2': 'DateUpdated&gt;',
                    'friendly_name': 'FriendlyName',
                    'status': 'Status',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'date_created': 'query',
                    'date_created2': 'query',
                    'date_created2': 'query',
                    'date_updated': 'query',
                    'date_updated2': 'query',
                    'date_updated2': 'query',
                    'friendly_name': 'query',
                    'status': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_conference
        )

        def __list_conference_recording(
            self,
            account_sid,
            conference_sid,
            **kwargs
        ):
            """list_conference_recording  # noqa: E501

            Retrieve a list of recordings belonging to the call used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_conference_recording(account_sid, conference_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
                conference_sid (str): The Conference SID that identifies the conference associated with the recording to read.

            Keyword Args:
                date_created (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                date_created2 (datetime): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20019
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            return self.call_with_http_info(**kwargs)

        self.list_conference_recording = Endpoint(
            settings={
                'response_type': (InlineResponse20019,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json',
                'operation_id': 'list_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'date_created',
                    'date_created2',
                    'date_created2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'date_created':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'date_created': 'DateCreated',
                    'date_created2': 'DateCreated&lt;',
                    'date_created2': 'DateCreated&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'date_created': 'query',
                    'date_created2': 'query',
                    'date_created2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_conference_recording
        )

        def __list_connect_app(
            self,
            account_sid,
            **kwargs
        ):
            """list_connect_app  # noqa: E501

            Retrieve a list of connect-apps belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_connect_app(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20020
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_connect_app = Endpoint(
            settings={
                'response_type': (InlineResponse20020,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/ConnectApps.json',
                'operation_id': 'list_connect_app',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_connect_app
        )

        def __list_dependent_phone_number(
            self,
            account_sid,
            address_sid,
            **kwargs
        ):
            """list_dependent_phone_number  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_dependent_phone_number(account_sid, address_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
                address_sid (str): The SID of the Address resource associated with the phone number.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2002
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['address_sid'] = \
                address_sid
            return self.call_with_http_info(**kwargs)

        self.list_dependent_phone_number = Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json',
                'operation_id': 'list_dependent_phone_number',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'address_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'address_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'address_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'address_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'address_sid': 'AddressSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'address_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_dependent_phone_number
        )

        def __list_incoming_phone_number(
            self,
            account_sid,
            **kwargs
        ):
            """list_incoming_phone_number  # noqa: E501

            Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.

            Keyword Args:
                beta (bool): Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                friendly_name (str): A string that identifies the IncomingPhoneNumber resources to read.. [optional]
                phone_number (str): The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.. [optional]
                origin (str): Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20021
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number = Endpoint(
            settings={
                'response_type': (InlineResponse20021,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json',
                'operation_id': 'list_incoming_phone_number',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'beta',
                    'friendly_name',
                    'phone_number',
                    'origin',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'beta':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'phone_number':
                        (str,),
                    'origin':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'beta': 'Beta',
                    'friendly_name': 'FriendlyName',
                    'phone_number': 'PhoneNumber',
                    'origin': 'Origin',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'beta': 'query',
                    'friendly_name': 'query',
                    'phone_number': 'query',
                    'origin': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number
        )

        def __list_incoming_phone_number_assigned_add_on(
            self,
            account_sid,
            resource_sid,
            **kwargs
        ):
            """list_incoming_phone_number_assigned_add_on  # noqa: E501

            Retrieve a list of Add-on installations currently assigned to this Number.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number_assigned_add_on(account_sid, resource_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
                resource_sid (str): The SID of the Phone Number to which the Add-on is assigned.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20025
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number_assigned_add_on = Endpoint(
            settings={
                'response_type': (InlineResponse20025,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json',
                'operation_id': 'list_incoming_phone_number_assigned_add_on',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number_assigned_add_on
        )

        def __list_incoming_phone_number_assigned_add_on_extension(
            self,
            account_sid,
            resource_sid,
            assigned_add_on_sid,
            **kwargs
        ):
            """list_incoming_phone_number_assigned_add_on_extension  # noqa: E501

            Retrieve a list of Extensions for the Assigned Add-on.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number_assigned_add_on_extension(account_sid, resource_sid, assigned_add_on_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
                resource_sid (str): The SID of the Phone Number to which the Add-on is assigned.
                assigned_add_on_sid (str): The SID that uniquely identifies the assigned Add-on installation.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20026
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['resource_sid'] = \
                resource_sid
            kwargs['assigned_add_on_sid'] = \
                assigned_add_on_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number_assigned_add_on_extension = Endpoint(
            settings={
                'response_type': (InlineResponse20026,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json',
                'operation_id': 'list_incoming_phone_number_assigned_add_on_extension',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'resource_sid',
                    'assigned_add_on_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('resource_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('assigned_add_on_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'resource_sid':
                        (str,),
                    'assigned_add_on_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'resource_sid': 'ResourceSid',
                    'assigned_add_on_sid': 'AssignedAddOnSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'resource_sid': 'path',
                    'assigned_add_on_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number_assigned_add_on_extension
        )

        def __list_incoming_phone_number_local(
            self,
            account_sid,
            **kwargs
        ):
            """list_incoming_phone_number_local  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number_local(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.

            Keyword Args:
                beta (bool): Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                friendly_name (str): A string that identifies the resources to read.. [optional]
                phone_number (str): The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.. [optional]
                origin (str): Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20022
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number_local = Endpoint(
            settings={
                'response_type': (InlineResponse20022,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json',
                'operation_id': 'list_incoming_phone_number_local',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'beta',
                    'friendly_name',
                    'phone_number',
                    'origin',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'beta':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'phone_number':
                        (str,),
                    'origin':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'beta': 'Beta',
                    'friendly_name': 'FriendlyName',
                    'phone_number': 'PhoneNumber',
                    'origin': 'Origin',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'beta': 'query',
                    'friendly_name': 'query',
                    'phone_number': 'query',
                    'origin': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number_local
        )

        def __list_incoming_phone_number_mobile(
            self,
            account_sid,
            **kwargs
        ):
            """list_incoming_phone_number_mobile  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number_mobile(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.

            Keyword Args:
                beta (bool): Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                friendly_name (str): A string that identifies the resources to read.. [optional]
                phone_number (str): The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.. [optional]
                origin (str): Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20023
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number_mobile = Endpoint(
            settings={
                'response_type': (InlineResponse20023,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json',
                'operation_id': 'list_incoming_phone_number_mobile',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'beta',
                    'friendly_name',
                    'phone_number',
                    'origin',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'beta':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'phone_number':
                        (str,),
                    'origin':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'beta': 'Beta',
                    'friendly_name': 'FriendlyName',
                    'phone_number': 'PhoneNumber',
                    'origin': 'Origin',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'beta': 'query',
                    'friendly_name': 'query',
                    'phone_number': 'query',
                    'origin': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number_mobile
        )

        def __list_incoming_phone_number_toll_free(
            self,
            account_sid,
            **kwargs
        ):
            """list_incoming_phone_number_toll_free  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_incoming_phone_number_toll_free(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.

            Keyword Args:
                beta (bool): Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.. [optional]
                friendly_name (str): A string that identifies the resources to read.. [optional]
                phone_number (str): The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.. [optional]
                origin (str): Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20024
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_incoming_phone_number_toll_free = Endpoint(
            settings={
                'response_type': (InlineResponse20024,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json',
                'operation_id': 'list_incoming_phone_number_toll_free',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'beta',
                    'friendly_name',
                    'phone_number',
                    'origin',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'beta':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'phone_number':
                        (str,),
                    'origin':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'beta': 'Beta',
                    'friendly_name': 'FriendlyName',
                    'phone_number': 'PhoneNumber',
                    'origin': 'Origin',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'beta': 'query',
                    'friendly_name': 'query',
                    'phone_number': 'query',
                    'origin': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_incoming_phone_number_toll_free
        )

        def __list_key(
            self,
            account_sid,
            **kwargs
        ):
            """list_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_key(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20027
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_key = Endpoint(
            settings={
                'response_type': (InlineResponse20027,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Keys.json',
                'operation_id': 'list_key',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_key
        )

        def __list_media(
            self,
            account_sid,
            message_sid,
            **kwargs
        ):
            """list_media  # noqa: E501

            Retrieve a list of Media resources belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_media(account_sid, message_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
                message_sid (str): The SID of the Message resource that this Media resource belongs to.

            Keyword Args:
                date_created (datetime): Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.. [optional]
                date_created2 (datetime): Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.. [optional]
                date_created2 (datetime): Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20029
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['message_sid'] = \
                message_sid
            return self.call_with_http_info(**kwargs)

        self.list_media = Endpoint(
            settings={
                'response_type': (InlineResponse20029,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json',
                'operation_id': 'list_media',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'message_sid',
                    'date_created',
                    'date_created2',
                    'date_created2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'message_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'message_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('message_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'message_sid':
                        (str,),
                    'date_created':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'message_sid': 'MessageSid',
                    'date_created': 'DateCreated',
                    'date_created2': 'DateCreated&lt;',
                    'date_created2': 'DateCreated&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'message_sid': 'path',
                    'date_created': 'query',
                    'date_created2': 'query',
                    'date_created2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_media
        )

        def __list_member(
            self,
            account_sid,
            queue_sid,
            **kwargs
        ):
            """list_member  # noqa: E501

            Retrieve the members of the queue  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_member(account_sid, queue_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
                queue_sid (str): The SID of the Queue in which to find the members

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20033
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['queue_sid'] = \
                queue_sid
            return self.call_with_http_info(**kwargs)

        self.list_member = Endpoint(
            settings={
                'response_type': (InlineResponse20033,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json',
                'operation_id': 'list_member',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'queue_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'queue_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'queue_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('queue_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'queue_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'queue_sid': 'QueueSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'queue_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_member
        )

        def __list_message(
            self,
            account_sid,
            **kwargs
        ):
            """list_message  # noqa: E501

            Retrieve a list of messages belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_message(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.

            Keyword Args:
                to (str): Read messages sent to only this phone number.. [optional]
                _from (str): Read messages sent from only this phone number or alphanumeric sender ID.. [optional]
                date_sent (datetime): The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.. [optional]
                date_sent2 (datetime): The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.. [optional]
                date_sent2 (datetime): The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20028
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_message = Endpoint(
            settings={
                'response_type': (InlineResponse20028,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages.json',
                'operation_id': 'list_message',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'to',
                    '_from',
                    'date_sent',
                    'date_sent2',
                    'date_sent2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'to':
                        (str,),
                    '_from':
                        (str,),
                    'date_sent':
                        (datetime,),
                    'date_sent2':
                        (datetime,),
                    'date_sent2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'to': 'To',
                    '_from': 'From',
                    'date_sent': 'DateSent',
                    'date_sent2': 'DateSent&lt;',
                    'date_sent2': 'DateSent&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'to': 'query',
                    '_from': 'query',
                    'date_sent': 'query',
                    'date_sent2': 'query',
                    'date_sent2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_message
        )

        def __list_notification(
            self,
            account_sid,
            **kwargs
        ):
            """list_notification  # noqa: E501

            Retrieve a list of notifications belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_notification(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.

            Keyword Args:
                log (int): Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.. [optional]
                message_date (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                message_date2 (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                message_date2 (datetime): Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20030
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_notification = Endpoint(
            settings={
                'response_type': (InlineResponse20030,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Notifications.json',
                'operation_id': 'list_notification',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'log',
                    'message_date',
                    'message_date2',
                    'message_date2',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'log':
                        (int,),
                    'message_date':
                        (datetime,),
                    'message_date2':
                        (datetime,),
                    'message_date2':
                        (datetime,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'log': 'Log',
                    'message_date': 'MessageDate',
                    'message_date2': 'MessageDate&lt;',
                    'message_date2': 'MessageDate&gt;',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'log': 'query',
                    'message_date': 'query',
                    'message_date2': 'query',
                    'message_date2': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_notification
        )

        def __list_outgoing_caller_id(
            self,
            account_sid,
            **kwargs
        ):
            """list_outgoing_caller_id  # noqa: E501

            Retrieve a list of outgoing-caller-ids belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_outgoing_caller_id(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.

            Keyword Args:
                phone_number (str): The phone number of the OutgoingCallerId resources to read.. [optional]
                friendly_name (str): The string that identifies the OutgoingCallerId resources to read.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20031
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_outgoing_caller_id = Endpoint(
            settings={
                'response_type': (InlineResponse20031,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json',
                'operation_id': 'list_outgoing_caller_id',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'phone_number',
                    'friendly_name',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'phone_number':
                        (str,),
                    'friendly_name':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'phone_number': 'PhoneNumber',
                    'friendly_name': 'FriendlyName',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'phone_number': 'query',
                    'friendly_name': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_outgoing_caller_id
        )

        def __list_participant(
            self,
            account_sid,
            conference_sid,
            **kwargs
        ):
            """list_participant  # noqa: E501

            Retrieve a list of participants belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_participant(account_sid, conference_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
                conference_sid (str): The SID of the conference with the participants to read.

            Keyword Args:
                muted (bool): Whether to return only participants that are muted. Can be: `true` or `false`.. [optional]
                hold (bool): Whether to return only participants that are on hold. Can be: `true` or `false`.. [optional]
                coaching (bool): Whether to return only participants who are coaching another call. Can be: `true` or `false`.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20018
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            return self.call_with_http_info(**kwargs)

        self.list_participant = Endpoint(
            settings={
                'response_type': (InlineResponse20018,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json',
                'operation_id': 'list_participant',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'muted',
                    'hold',
                    'coaching',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'muted':
                        (bool,),
                    'hold':
                        (bool,),
                    'coaching':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'muted': 'Muted',
                    'hold': 'Hold',
                    'coaching': 'Coaching',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'muted': 'query',
                    'hold': 'query',
                    'coaching': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_participant
        )

        def __list_queue(
            self,
            account_sid,
            **kwargs
        ):
            """list_queue  # noqa: E501

            Retrieve a list of queues belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_queue(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20032
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_queue = Endpoint(
            settings={
                'response_type': (InlineResponse20032,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues.json',
                'operation_id': 'list_queue',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_queue
        )

        def __list_recording(
            self,
            account_sid,
            **kwargs
        ):
            """list_recording  # noqa: E501

            Retrieve a list of recordings belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_recording(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.

            Keyword Args:
                date_created (datetime): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.. [optional]
                date_created2 (datetime): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.. [optional]
                date_created2 (datetime): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.. [optional]
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.. [optional]
                conference_sid (str): The Conference SID that identifies the conference associated with the recording to read.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20034
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_recording = Endpoint(
            settings={
                'response_type': (InlineResponse20034,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings.json',
                'operation_id': 'list_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'date_created',
                    'date_created2',
                    'date_created2',
                    'call_sid',
                    'conference_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'conference_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'date_created':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'date_created2':
                        (datetime,),
                    'call_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'date_created': 'DateCreated',
                    'date_created2': 'DateCreated&lt;',
                    'date_created2': 'DateCreated&gt;',
                    'call_sid': 'CallSid',
                    'conference_sid': 'ConferenceSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'date_created': 'query',
                    'date_created2': 'query',
                    'date_created2': 'query',
                    'call_sid': 'query',
                    'conference_sid': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_recording
        )

        def __list_recording_add_on_result(
            self,
            account_sid,
            reference_sid,
            **kwargs
        ):
            """list_recording_add_on_result  # noqa: E501

            Retrieve a list of results belonging to the recording  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_recording_add_on_result(account_sid, reference_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
                reference_sid (str): The SID of the recording to which the result to read belongs.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20036
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            return self.call_with_http_info(**kwargs)

        self.list_recording_add_on_result = Endpoint(
            settings={
                'response_type': (InlineResponse20036,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json',
                'operation_id': 'list_recording_add_on_result',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_recording_add_on_result
        )

        def __list_recording_add_on_result_payload(
            self,
            account_sid,
            reference_sid,
            add_on_result_sid,
            **kwargs
        ):
            """list_recording_add_on_result_payload  # noqa: E501

            Retrieve a list of payloads belonging to the AddOnResult  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_recording_add_on_result_payload(account_sid, reference_sid, add_on_result_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
                reference_sid (str): The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
                add_on_result_sid (str): The SID of the AddOnResult to which the payloads to read belongs.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20037
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['reference_sid'] = \
                reference_sid
            kwargs['add_on_result_sid'] = \
                add_on_result_sid
            return self.call_with_http_info(**kwargs)

        self.list_recording_add_on_result_payload = Endpoint(
            settings={
                'response_type': (InlineResponse20037,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json',
                'operation_id': 'list_recording_add_on_result_payload',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'reference_sid',
                    'add_on_result_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('reference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('add_on_result_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^XR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'reference_sid':
                        (str,),
                    'add_on_result_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'reference_sid': 'ReferenceSid',
                    'add_on_result_sid': 'AddOnResultSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'reference_sid': 'path',
                    'add_on_result_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_recording_add_on_result_payload
        )

        def __list_recording_transcription(
            self,
            account_sid,
            recording_sid,
            **kwargs
        ):
            """list_recording_transcription  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_recording_transcription(account_sid, recording_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
                recording_sid (str): The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20035
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['recording_sid'] = \
                recording_sid
            return self.call_with_http_info(**kwargs)

        self.list_recording_transcription = Endpoint(
            settings={
                'response_type': (InlineResponse20035,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json',
                'operation_id': 'list_recording_transcription',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'recording_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'recording_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'recording_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('recording_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RE[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'recording_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'recording_sid': 'RecordingSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'recording_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_recording_transcription
        )

        def __list_short_code(
            self,
            account_sid,
            **kwargs
        ):
            """list_short_code  # noqa: E501

            Retrieve a list of short-codes belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_short_code(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.

            Keyword Args:
                friendly_name (str): The string that identifies the ShortCode resources to read.. [optional]
                short_code (str): Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20048
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_short_code = Endpoint(
            settings={
                'response_type': (InlineResponse20048,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json',
                'operation_id': 'list_short_code',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'friendly_name',
                    'short_code',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'short_code':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'friendly_name': 'FriendlyName',
                    'short_code': 'ShortCode',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'friendly_name': 'query',
                    'short_code': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_short_code
        )

        def __list_signing_key(
            self,
            account_sid,
            **kwargs
        ):
            """list_signing_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_signing_key(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str):

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20049
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_signing_key = Endpoint(
            settings={
                'response_type': (InlineResponse20049,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SigningKeys.json',
                'operation_id': 'list_signing_key',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_signing_key
        )

        def __list_sip_auth_calls_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            **kwargs
        ):
            """list_sip_auth_calls_credential_list_mapping  # noqa: E501

            Retrieve a list of credential list mappings belonging to the domain used in the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_auth_calls_credential_list_mapping(account_sid, domain_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
                domain_sid (str): The SID of the SIP domain that contains the resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20041
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_auth_calls_credential_list_mapping = Endpoint(
            settings={
                'response_type': (InlineResponse20041,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json',
                'operation_id': 'list_sip_auth_calls_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_auth_calls_credential_list_mapping
        )

        def __list_sip_auth_calls_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            **kwargs
        ):
            """list_sip_auth_calls_ip_access_control_list_mapping  # noqa: E501

            Retrieve a list of IP Access Control List mappings belonging to the domain used in the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_auth_calls_ip_access_control_list_mapping(account_sid, domain_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
                domain_sid (str): The SID of the SIP domain that contains the resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20042
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_auth_calls_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (InlineResponse20042,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json',
                'operation_id': 'list_sip_auth_calls_ip_access_control_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_auth_calls_ip_access_control_list_mapping
        )

        def __list_sip_auth_registrations_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            **kwargs
        ):
            """list_sip_auth_registrations_credential_list_mapping  # noqa: E501

            Retrieve a list of credential list mappings belonging to the domain used in the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_auth_registrations_credential_list_mapping(account_sid, domain_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
                domain_sid (str): The SID of the SIP domain that contains the resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20043
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_auth_registrations_credential_list_mapping = Endpoint(
            settings={
                'response_type': (InlineResponse20043,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json',
                'operation_id': 'list_sip_auth_registrations_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_auth_registrations_credential_list_mapping
        )

        def __list_sip_credential(
            self,
            account_sid,
            credential_list_sid,
            **kwargs
        ):
            """list_sip_credential  # noqa: E501

            Retrieve a list of credentials.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_credential(account_sid, credential_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                credential_list_sid (str): The unique id that identifies the credential list that contains the desired credentials.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20039
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_credential = Endpoint(
            settings={
                'response_type': (InlineResponse20039,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json',
                'operation_id': 'list_sip_credential',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'credential_list_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'credential_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'credential_list_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'credential_list_sid': 'CredentialListSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'credential_list_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_credential
        )

        def __list_sip_credential_list(
            self,
            account_sid,
            **kwargs
        ):
            """list_sip_credential_list  # noqa: E501

            Get All Credential Lists  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_credential_list(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20038
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_credential_list = Endpoint(
            settings={
                'response_type': (InlineResponse20038,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json',
                'operation_id': 'list_sip_credential_list',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_credential_list
        )

        def __list_sip_credential_list_mapping(
            self,
            account_sid,
            domain_sid,
            **kwargs
        ):
            """list_sip_credential_list_mapping  # noqa: E501

            Read multiple CredentialListMapping resources from an account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_credential_list_mapping(account_sid, domain_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20044
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_credential_list_mapping = Endpoint(
            settings={
                'response_type': (InlineResponse20044,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json',
                'operation_id': 'list_sip_credential_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_credential_list_mapping
        )

        def __list_sip_domain(
            self,
            account_sid,
            **kwargs
        ):
            """list_sip_domain  # noqa: E501

            Retrieve a list of domains belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_domain(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20040
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_domain = Endpoint(
            settings={
                'response_type': (InlineResponse20040,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json',
                'operation_id': 'list_sip_domain',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_domain
        )

        def __list_sip_ip_access_control_list(
            self,
            account_sid,
            **kwargs
        ):
            """list_sip_ip_access_control_list  # noqa: E501

            Retrieve a list of IpAccessControlLists that belong to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_ip_access_control_list(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20046
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_ip_access_control_list = Endpoint(
            settings={
                'response_type': (InlineResponse20046,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json',
                'operation_id': 'list_sip_ip_access_control_list',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_ip_access_control_list
        )

        def __list_sip_ip_access_control_list_mapping(
            self,
            account_sid,
            domain_sid,
            **kwargs
        ):
            """list_sip_ip_access_control_list_mapping  # noqa: E501

            Retrieve a list of IpAccessControlListMapping resources.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_ip_access_control_list_mapping(account_sid, domain_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                domain_sid (str): A 34 character string that uniquely identifies the SIP domain.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20045
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['domain_sid'] = \
                domain_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_ip_access_control_list_mapping = Endpoint(
            settings={
                'response_type': (InlineResponse20045,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json',
                'operation_id': 'list_sip_ip_access_control_list_mapping',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'domain_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'domain_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('domain_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'domain_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'domain_sid': 'DomainSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'domain_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_ip_access_control_list_mapping
        )

        def __list_sip_ip_address(
            self,
            account_sid,
            ip_access_control_list_sid,
            **kwargs
        ):
            """list_sip_ip_address  # noqa: E501

            Read multiple IpAddress resources.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sip_ip_address(account_sid, ip_access_control_list_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                ip_access_control_list_sid (str): The IpAccessControlList Sid that identifies the IpAddress resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20047
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            return self.call_with_http_info(**kwargs)

        self.list_sip_ip_address = Endpoint(
            settings={
                'response_type': (InlineResponse20047,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json',
                'operation_id': 'list_sip_ip_address',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                    'ip_access_control_list_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ip_access_control_list_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sip_ip_address
        )

        def __list_transcription(
            self,
            account_sid,
            **kwargs
        ):
            """list_transcription  # noqa: E501

            Retrieve a list of transcriptions belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_transcription(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.

            Keyword Args:
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20050
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_transcription = Endpoint(
            settings={
                'response_type': (InlineResponse20050,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Transcriptions.json',
                'operation_id': 'list_transcription',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_transcription
        )

        def __list_usage_record(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record  # noqa: E501

            Retrieve a list of usage-records belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20051
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record = Endpoint(
            settings={
                'response_type': (InlineResponse20051,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records.json',
                'operation_id': 'list_usage_record',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record
        )

        def __list_usage_record_all_time(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_all_time  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_all_time(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20052
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_all_time = Endpoint(
            settings={
                'response_type': (InlineResponse20052,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json',
                'operation_id': 'list_usage_record_all_time',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_all_time
        )

        def __list_usage_record_daily(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_daily  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_daily(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20053
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_daily = Endpoint(
            settings={
                'response_type': (InlineResponse20053,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json',
                'operation_id': 'list_usage_record_daily',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_daily
        )

        def __list_usage_record_last_month(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_last_month  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_last_month(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20054
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_last_month = Endpoint(
            settings={
                'response_type': (InlineResponse20054,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json',
                'operation_id': 'list_usage_record_last_month',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_last_month
        )

        def __list_usage_record_monthly(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_monthly  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_monthly(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20055
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_monthly = Endpoint(
            settings={
                'response_type': (InlineResponse20055,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json',
                'operation_id': 'list_usage_record_monthly',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_monthly
        )

        def __list_usage_record_this_month(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_this_month  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_this_month(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20056
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_this_month = Endpoint(
            settings={
                'response_type': (InlineResponse20056,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json',
                'operation_id': 'list_usage_record_this_month',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_this_month
        )

        def __list_usage_record_today(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_today  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_today(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20057
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_today = Endpoint(
            settings={
                'response_type': (InlineResponse20057,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json',
                'operation_id': 'list_usage_record_today',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_today
        )

        def __list_usage_record_yearly(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_yearly  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_yearly(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20058
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_yearly = Endpoint(
            settings={
                'response_type': (InlineResponse20058,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json',
                'operation_id': 'list_usage_record_yearly',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_yearly
        )

        def __list_usage_record_yesterday(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_record_yesterday  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_record_yesterday(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.

            Keyword Args:
                category (str): The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.. [optional]
                start_date (datetime): Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.. [optional]
                end_date (datetime): Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.. [optional]
                include_subaccounts (bool): Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20059
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_record_yesterday = Endpoint(
            settings={
                'response_type': (InlineResponse20059,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json',
                'operation_id': 'list_usage_record_yesterday',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'category',
                    'start_date',
                    'end_date',
                    'include_subaccounts',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'category':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'include_subaccounts':
                        (bool,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'category': 'Category',
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'include_subaccounts': 'IncludeSubaccounts',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'category': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'include_subaccounts': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_record_yesterday
        )

        def __list_usage_trigger(
            self,
            account_sid,
            **kwargs
        ):
            """list_usage_trigger  # noqa: E501

            Retrieve a list of usage-triggers belonging to the account used to make the request  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_usage_trigger(account_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.

            Keyword Args:
                recurring (str): The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.. [optional]
                trigger_by (str): The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).. [optional]
                usage_category (str): The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).. [optional]
                page_size (int): How many resources to return in each list page. The default is 50, and the maximum is 1000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse20060
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            return self.call_with_http_info(**kwargs)

        self.list_usage_trigger = Endpoint(
            settings={
                'response_type': (InlineResponse20060,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json',
                'operation_id': 'list_usage_trigger',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'recurring',
                    'trigger_by',
                    'usage_category',
                    'page_size',
                ],
                'required': [
                    'account_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'recurring',
                    'trigger_by',
                    'usage_category',
                ],
                'validation': [
                    'account_sid',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('recurring',): {

                        "DAILY": "daily",
                        "MONTHLY": "monthly",
                        "YEARLY": "yearly",
                        "ALLTIME": "alltime"
                    },
                    ('trigger_by',): {

                        "COUNT": "count",
                        "USAGE": "usage",
                        "PRICE": "price"
                    },
                    ('usage_category',): {

                        "AGENT-CONFERENCE": "agent-conference",
                        "ANSWERING-MACHINE-DETECTION": "answering-machine-detection",
                        "AUTHY-AUTHENTICATIONS": "authy-authentications",
                        "AUTHY-CALLS-OUTBOUND": "authy-calls-outbound",
                        "AUTHY-MONTHLY-FEES": "authy-monthly-fees",
                        "AUTHY-PHONE-INTELLIGENCE": "authy-phone-intelligence",
                        "AUTHY-PHONE-VERIFICATIONS": "authy-phone-verifications",
                        "AUTHY-SMS-OUTBOUND": "authy-sms-outbound",
                        "CALL-PROGESS-EVENTS": "call-progess-events",
                        "CALLERIDLOOKUPS": "calleridlookups",
                        "CALLS": "calls",
                        "CALLS-CLIENT": "calls-client",
                        "CALLS-GLOBALCONFERENCE": "calls-globalconference",
                        "CALLS-INBOUND": "calls-inbound",
                        "CALLS-INBOUND-LOCAL": "calls-inbound-local",
                        "CALLS-INBOUND-MOBILE": "calls-inbound-mobile",
                        "CALLS-INBOUND-TOLLFREE": "calls-inbound-tollfree",
                        "CALLS-OUTBOUND": "calls-outbound",
                        "CALLS-PAY-VERB-TRANSACTIONS": "calls-pay-verb-transactions",
                        "CALLS-RECORDINGS": "calls-recordings",
                        "CALLS-SIP": "calls-sip",
                        "CALLS-SIP-INBOUND": "calls-sip-inbound",
                        "CALLS-SIP-OUTBOUND": "calls-sip-outbound",
                        "CARRIER-LOOKUPS": "carrier-lookups",
                        "CONVERSATIONS": "conversations",
                        "CONVERSATIONS-API-REQUESTS": "conversations-api-requests",
                        "CONVERSATIONS-CONVERSATION-EVENTS": "conversations-conversation-events",
                        "CONVERSATIONS-ENDPOINT-CONNECTIVITY": "conversations-endpoint-connectivity",
                        "CONVERSATIONS-EVENTS": "conversations-events",
                        "CONVERSATIONS-PARTICIPANT-EVENTS": "conversations-participant-events",
                        "CONVERSATIONS-PARTICIPANTS": "conversations-participants",
                        "CPS": "cps",
                        "FRAUD-LOOKUPS": "fraud-lookups",
                        "GROUP-ROOMS": "group-rooms",
                        "GROUP-ROOMS-DATA-TRACK": "group-rooms-data-track",
                        "GROUP-ROOMS-ENCRYPTED-MEDIA-RECORDED": "group-rooms-encrypted-media-recorded",
                        "GROUP-ROOMS-MEDIA-DOWNLOADED": "group-rooms-media-downloaded",
                        "GROUP-ROOMS-MEDIA-RECORDED": "group-rooms-media-recorded",
                        "GROUP-ROOMS-MEDIA-ROUTED": "group-rooms-media-routed",
                        "GROUP-ROOMS-MEDIA-STORED": "group-rooms-media-stored",
                        "GROUP-ROOMS-PARTICIPANT-MINUTES": "group-rooms-participant-minutes",
                        "GROUP-ROOMS-RECORDED-MINUTES": "group-rooms-recorded-minutes",
                        "IMP-V1-USAGE": "imp-v1-usage",
                        "LOOKUPS": "lookups",
                        "MARKETPLACE": "marketplace",
                        "MARKETPLACE-ALGORITHMIA-NAMED-ENTITY-RECOGNITION": "marketplace-algorithmia-named-entity-recognition",
                        "MARKETPLACE-CADENCE-TRANSCRIPTION": "marketplace-cadence-transcription",
                        "MARKETPLACE-CADENCE-TRANSLATION": "marketplace-cadence-translation",
                        "MARKETPLACE-CAPIO-SPEECH-TO-TEXT": "marketplace-capio-speech-to-text",
                        "MARKETPLACE-CONVRIZA-ABABA": "marketplace-convriza-ababa",
                        "MARKETPLACE-DEEPGRAM-PHRASE-DETECTOR": "marketplace-deepgram-phrase-detector",
                        "MARKETPLACE-DIGITAL-SEGMENT-BUSINESS-INFO": "marketplace-digital-segment-business-info",
                        "MARKETPLACE-FACEBOOK-OFFLINE-CONVERSIONS": "marketplace-facebook-offline-conversions",
                        "MARKETPLACE-GOOGLE-SPEECH-TO-TEXT": "marketplace-google-speech-to-text",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-INSIGHTS": "marketplace-ibm-watson-message-insights",
                        "MARKETPLACE-IBM-WATSON-MESSAGE-SENTIMENT": "marketplace-ibm-watson-message-sentiment",
                        "MARKETPLACE-IBM-WATSON-RECORDING-ANALYSIS": "marketplace-ibm-watson-recording-analysis",
                        "MARKETPLACE-IBM-WATSON-TONE-ANALYZER": "marketplace-ibm-watson-tone-analyzer",
                        "MARKETPLACE-ICEHOOK-SYSTEMS-SCOUT": "marketplace-icehook-systems-scout",
                        "MARKETPLACE-INFOGROUP-DATAAXLE-BIZINFO": "marketplace-infogroup-dataaxle-bizinfo",
                        "MARKETPLACE-KEEN-IO-CONTACT-CENTER-ANALYTICS": "marketplace-keen-io-contact-center-analytics",
                        "MARKETPLACE-MARCHEX-CLEANCALL": "marketplace-marchex-cleancall",
                        "MARKETPLACE-MARCHEX-SENTIMENT-ANALYSIS-FOR-SMS": "marketplace-marchex-sentiment-analysis-for-sms",
                        "MARKETPLACE-MARKETPLACE-NEXTCALLER-SOCIAL-ID": "marketplace-marketplace-nextcaller-social-id",
                        "MARKETPLACE-MOBILE-COMMONS-OPT-OUT-CLASSIFIER": "marketplace-mobile-commons-opt-out-classifier",
                        "MARKETPLACE-NEXIWAVE-VOICEMAIL-TO-TEXT": "marketplace-nexiwave-voicemail-to-text",
                        "MARKETPLACE-NEXTCALLER-ADVANCED-CALLER-IDENTIFICATION": "marketplace-nextcaller-advanced-caller-identification",
                        "MARKETPLACE-NOMOROBO-SPAM-SCORE": "marketplace-nomorobo-spam-score",
                        "MARKETPLACE-PAYFONE-TCPA-COMPLIANCE": "marketplace-payfone-tcpa-compliance",
                        "MARKETPLACE-REMEETING-AUTOMATIC-SPEECH-RECOGNITION": "marketplace-remeeting-automatic-speech-recognition",
                        "MARKETPLACE-TCPA-DEFENSE-SOLUTIONS-BLACKLIST-FEED": "marketplace-tcpa-defense-solutions-blacklist-feed",
                        "MARKETPLACE-TELO-OPENCNAM": "marketplace-telo-opencnam",
                        "MARKETPLACE-TRUECNAM-TRUE-SPAM": "marketplace-truecnam-true-spam",
                        "MARKETPLACE-TWILIO-CALLER-NAME-LOOKUP-US": "marketplace-twilio-caller-name-lookup-us",
                        "MARKETPLACE-TWILIO-CARRIER-INFORMATION-LOOKUP": "marketplace-twilio-carrier-information-lookup",
                        "MARKETPLACE-VOICEBASE-PCI": "marketplace-voicebase-pci",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION": "marketplace-voicebase-transcription",
                        "MARKETPLACE-VOICEBASE-TRANSCRIPTION-CUSTOM-VOCABULARY": "marketplace-voicebase-transcription-custom-vocabulary",
                        "MARKETPLACE-WHITEPAGES-PRO-CALLER-IDENTIFICATION": "marketplace-whitepages-pro-caller-identification",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-INTELLIGENCE": "marketplace-whitepages-pro-phone-intelligence",
                        "MARKETPLACE-WHITEPAGES-PRO-PHONE-REPUTATION": "marketplace-whitepages-pro-phone-reputation",
                        "MARKETPLACE-WOLFARM-SPOKEN-RESULTS": "marketplace-wolfarm-spoken-results",
                        "MARKETPLACE-WOLFRAM-SHORT-ANSWER": "marketplace-wolfram-short-answer",
                        "MARKETPLACE-YTICA-CONTACT-CENTER-REPORTING-ANALYTICS": "marketplace-ytica-contact-center-reporting-analytics",
                        "MEDIASTORAGE": "mediastorage",
                        "MMS": "mms",
                        "MMS-INBOUND": "mms-inbound",
                        "MMS-INBOUND-LONGCODE": "mms-inbound-longcode",
                        "MMS-INBOUND-SHORTCODE": "mms-inbound-shortcode",
                        "MMS-MESSAGES-CARRIERFEES": "mms-messages-carrierfees",
                        "MMS-OUTBOUND": "mms-outbound",
                        "MMS-OUTBOUND-LONGCODE": "mms-outbound-longcode",
                        "MMS-OUTBOUND-SHORTCODE": "mms-outbound-shortcode",
                        "MONITOR-READS": "monitor-reads",
                        "MONITOR-STORAGE": "monitor-storage",
                        "MONITOR-WRITES": "monitor-writes",
                        "NOTIFY": "notify",
                        "NOTIFY-ACTIONS-ATTEMPTS": "notify-actions-attempts",
                        "NOTIFY-CHANNELS": "notify-channels",
                        "NUMBER-FORMAT-LOOKUPS": "number-format-lookups",
                        "PCHAT": "pchat",
                        "PCHAT-USERS": "pchat-users",
                        "PEER-TO-PEER-ROOMS-PARTICIPANT-MINUTES": "peer-to-peer-rooms-participant-minutes",
                        "PFAX": "pfax",
                        "PFAX-MINUTES": "pfax-minutes",
                        "PFAX-MINUTES-INBOUND": "pfax-minutes-inbound",
                        "PFAX-MINUTES-OUTBOUND": "pfax-minutes-outbound",
                        "PFAX-PAGES": "pfax-pages",
                        "PHONENUMBERS": "phonenumbers",
                        "PHONENUMBERS-CPS": "phonenumbers-cps",
                        "PHONENUMBERS-EMERGENCY": "phonenumbers-emergency",
                        "PHONENUMBERS-LOCAL": "phonenumbers-local",
                        "PHONENUMBERS-MOBILE": "phonenumbers-mobile",
                        "PHONENUMBERS-SETUPS": "phonenumbers-setups",
                        "PHONENUMBERS-TOLLFREE": "phonenumbers-tollfree",
                        "PREMIUMSUPPORT": "premiumsupport",
                        "PROXY": "proxy",
                        "PROXY-ACTIVE-SESSIONS": "proxy-active-sessions",
                        "PSTNCONNECTIVITY": "pstnconnectivity",
                        "PV": "pv",
                        "PV-COMPOSITION-MEDIA-DOWNLOADED": "pv-composition-media-downloaded",
                        "PV-COMPOSITION-MEDIA-ENCRYPTED": "pv-composition-media-encrypted",
                        "PV-COMPOSITION-MEDIA-STORED": "pv-composition-media-stored",
                        "PV-COMPOSITION-MINUTES": "pv-composition-minutes",
                        "PV-RECORDING-COMPOSITIONS": "pv-recording-compositions",
                        "PV-ROOM-PARTICIPANTS": "pv-room-participants",
                        "PV-ROOM-PARTICIPANTS-AU1": "pv-room-participants-au1",
                        "PV-ROOM-PARTICIPANTS-BR1": "pv-room-participants-br1",
                        "PV-ROOM-PARTICIPANTS-IE1": "pv-room-participants-ie1",
                        "PV-ROOM-PARTICIPANTS-JP1": "pv-room-participants-jp1",
                        "PV-ROOM-PARTICIPANTS-SG1": "pv-room-participants-sg1",
                        "PV-ROOM-PARTICIPANTS-US1": "pv-room-participants-us1",
                        "PV-ROOM-PARTICIPANTS-US2": "pv-room-participants-us2",
                        "PV-ROOMS": "pv-rooms",
                        "PV-SIP-ENDPOINT-REGISTRATIONS": "pv-sip-endpoint-registrations",
                        "RECORDINGS": "recordings",
                        "RECORDINGSTORAGE": "recordingstorage",
                        "ROOMS-GROUP-BANDWIDTH": "rooms-group-bandwidth",
                        "ROOMS-GROUP-MINUTES": "rooms-group-minutes",
                        "ROOMS-PEER-TO-PEER-MINUTES": "rooms-peer-to-peer-minutes",
                        "SHORTCODES": "shortcodes",
                        "SHORTCODES-CUSTOMEROWNED": "shortcodes-customerowned",
                        "SHORTCODES-MMS-ENABLEMENT": "shortcodes-mms-enablement",
                        "SHORTCODES-MPS": "shortcodes-mps",
                        "SHORTCODES-RANDOM": "shortcodes-random",
                        "SHORTCODES-UK": "shortcodes-uk",
                        "SHORTCODES-VANITY": "shortcodes-vanity",
                        "SMALL-GROUP-ROOMS": "small-group-rooms",
                        "SMALL-GROUP-ROOMS-DATA-TRACK": "small-group-rooms-data-track",
                        "SMALL-GROUP-ROOMS-PARTICIPANT-MINUTES": "small-group-rooms-participant-minutes",
                        "SMS": "sms",
                        "SMS-INBOUND": "sms-inbound",
                        "SMS-INBOUND-LONGCODE": "sms-inbound-longcode",
                        "SMS-INBOUND-SHORTCODE": "sms-inbound-shortcode",
                        "SMS-MESSAGES-CARRIERFEES": "sms-messages-carrierfees",
                        "SMS-MESSAGES-FEATURES": "sms-messages-features",
                        "SMS-MESSAGES-FEATURES-SENDERID": "sms-messages-features-senderid",
                        "SMS-OUTBOUND": "sms-outbound",
                        "SMS-OUTBOUND-CONTENT-INSPECTION": "sms-outbound-content-inspection",
                        "SMS-OUTBOUND-LONGCODE": "sms-outbound-longcode",
                        "SMS-OUTBOUND-SHORTCODE": "sms-outbound-shortcode",
                        "SPEECH-RECOGNITION": "speech-recognition",
                        "STUDIO-ENGAGEMENTS": "studio-engagements",
                        "SYNC": "sync",
                        "SYNC-ACTIONS": "sync-actions",
                        "SYNC-ENDPOINT-HOURS": "sync-endpoint-hours",
                        "SYNC-ENDPOINT-HOURS-ABOVE-DAILY-CAP": "sync-endpoint-hours-above-daily-cap",
                        "TASKROUTER-TASKS": "taskrouter-tasks",
                        "TOTALPRICE": "totalprice",
                        "TRANSCRIPTIONS": "transcriptions",
                        "TRUNKING-CPS": "trunking-cps",
                        "TRUNKING-EMERGENCY-CALLS": "trunking-emergency-calls",
                        "TRUNKING-ORIGINATION": "trunking-origination",
                        "TRUNKING-ORIGINATION-LOCAL": "trunking-origination-local",
                        "TRUNKING-ORIGINATION-MOBILE": "trunking-origination-mobile",
                        "TRUNKING-ORIGINATION-TOLLFREE": "trunking-origination-tollfree",
                        "TRUNKING-RECORDINGS": "trunking-recordings",
                        "TRUNKING-SECURE": "trunking-secure",
                        "TRUNKING-TERMINATION": "trunking-termination",
                        "TURNMEGABYTES": "turnmegabytes",
                        "TURNMEGABYTES-AUSTRALIA": "turnmegabytes-australia",
                        "TURNMEGABYTES-BRASIL": "turnmegabytes-brasil",
                        "TURNMEGABYTES-GERMANY": "turnmegabytes-germany",
                        "TURNMEGABYTES-INDIA": "turnmegabytes-india",
                        "TURNMEGABYTES-IRELAND": "turnmegabytes-ireland",
                        "TURNMEGABYTES-JAPAN": "turnmegabytes-japan",
                        "TURNMEGABYTES-SINGAPORE": "turnmegabytes-singapore",
                        "TURNMEGABYTES-USEAST": "turnmegabytes-useast",
                        "TURNMEGABYTES-USWEST": "turnmegabytes-uswest",
                        "TWILIO-INTERCONNECT": "twilio-interconnect",
                        "VERIFY-PUSH": "verify-push",
                        "VIDEO-RECORDINGS": "video-recordings",
                        "VOICE-INSIGHTS": "voice-insights",
                        "VOICE-INSIGHTS-CLIENT-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-client-insights-on-demand-minute",
                        "VOICE-INSIGHTS-PTSN-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-ptsn-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-INTERFACE-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-interface-insights-on-demand-minute",
                        "VOICE-INSIGHTS-SIP-TRUNKING-INSIGHTS-ON-DEMAND-MINUTE": "voice-insights-sip-trunking-insights-on-demand-minute",
                        "WIRELESS": "wireless",
                        "WIRELESS-ORDERS": "wireless-orders",
                        "WIRELESS-ORDERS-ARTWORK": "wireless-orders-artwork",
                        "WIRELESS-ORDERS-BULK": "wireless-orders-bulk",
                        "WIRELESS-ORDERS-ESIM": "wireless-orders-esim",
                        "WIRELESS-ORDERS-STARTER": "wireless-orders-starter",
                        "WIRELESS-USAGE": "wireless-usage",
                        "WIRELESS-USAGE-COMMANDS": "wireless-usage-commands",
                        "WIRELESS-USAGE-COMMANDS-AFRICA": "wireless-usage-commands-africa",
                        "WIRELESS-USAGE-COMMANDS-ASIA": "wireless-usage-commands-asia",
                        "WIRELESS-USAGE-COMMANDS-CENTRALANDSOUTHAMERICA": "wireless-usage-commands-centralandsouthamerica",
                        "WIRELESS-USAGE-COMMANDS-EUROPE": "wireless-usage-commands-europe",
                        "WIRELESS-USAGE-COMMANDS-HOME": "wireless-usage-commands-home",
                        "WIRELESS-USAGE-COMMANDS-NORTHAMERICA": "wireless-usage-commands-northamerica",
                        "WIRELESS-USAGE-COMMANDS-OCEANIA": "wireless-usage-commands-oceania",
                        "WIRELESS-USAGE-COMMANDS-ROAMING": "wireless-usage-commands-roaming",
                        "WIRELESS-USAGE-DATA": "wireless-usage-data",
                        "WIRELESS-USAGE-DATA-AFRICA": "wireless-usage-data-africa",
                        "WIRELESS-USAGE-DATA-ASIA": "wireless-usage-data-asia",
                        "WIRELESS-USAGE-DATA-CENTRALANDSOUTHAMERICA": "wireless-usage-data-centralandsouthamerica",
                        "WIRELESS-USAGE-DATA-CUSTOM-ADDITIONALMB": "wireless-usage-data-custom-additionalmb",
                        "WIRELESS-USAGE-DATA-CUSTOM-FIRST5MB": "wireless-usage-data-custom-first5mb",
                        "WIRELESS-USAGE-DATA-DOMESTIC-ROAMING": "wireless-usage-data-domestic-roaming",
                        "WIRELESS-USAGE-DATA-EUROPE": "wireless-usage-data-europe",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-ADDITIONALGB": "wireless-usage-data-individual-additionalgb",
                        "WIRELESS-USAGE-DATA-INDIVIDUAL-FIRSTGB": "wireless-usage-data-individual-firstgb",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-CANADA": "wireless-usage-data-international-roaming-canada",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-INDIA": "wireless-usage-data-international-roaming-india",
                        "WIRELESS-USAGE-DATA-INTERNATIONAL-ROAMING-MEXICO": "wireless-usage-data-international-roaming-mexico",
                        "WIRELESS-USAGE-DATA-NORTHAMERICA": "wireless-usage-data-northamerica",
                        "WIRELESS-USAGE-DATA-OCEANIA": "wireless-usage-data-oceania",
                        "WIRELESS-USAGE-DATA-POOLED": "wireless-usage-data-pooled",
                        "WIRELESS-USAGE-DATA-POOLED-DOWNLINK": "wireless-usage-data-pooled-downlink",
                        "WIRELESS-USAGE-DATA-POOLED-UPLINK": "wireless-usage-data-pooled-uplink",
                        "WIRELESS-USAGE-MRC": "wireless-usage-mrc",
                        "WIRELESS-USAGE-MRC-CUSTOM": "wireless-usage-mrc-custom",
                        "WIRELESS-USAGE-MRC-INDIVIDUAL": "wireless-usage-mrc-individual",
                        "WIRELESS-USAGE-MRC-POOLED": "wireless-usage-mrc-pooled",
                        "WIRELESS-USAGE-MRC-SUSPENDED": "wireless-usage-mrc-suspended",
                        "WIRELESS-USAGE-SMS": "wireless-usage-sms",
                        "WIRELESS-USAGE-VOICE": "wireless-usage-voice"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'recurring':
                        (str,),
                    'trigger_by':
                        (str,),
                    'usage_category':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'recurring': 'Recurring',
                    'trigger_by': 'TriggerBy',
                    'usage_category': 'UsageCategory',
                    'page_size': 'PageSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'recurring': 'query',
                    'trigger_by': 'query',
                    'usage_category': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_usage_trigger
        )

        def __update_account(
            self,
            sid,
            **kwargs
        ):
            """update_account  # noqa: E501

            Modify the properties of a given Account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_account(sid, async_req=True)
            >>> result = thread.get()

            Args:
                sid (str): The Account Sid that uniquely identifies the account to update

            Keyword Args:
                friendly_name (str): Update the human-readable description of this Account. [optional]
                status (str): Alter the status of this account: use `closed` to irreversibly close this account, `suspended` to temporarily suspend it, or `active` to reactivate it.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010Account
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_account = Endpoint(
            settings={
                'response_type': (ApiV2010Account,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{Sid}.json',
                'operation_id': 'update_account',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'sid',
                    'friendly_name',
                    'status',
                ],
                'required': [
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "ACTIVE": "active",
                        "SUSPENDED": "suspended",
                        "CLOSED": "closed"
                    },
                },
                'openapi_types': {
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                    'status': 'Status',
                },
                'location_map': {
                    'sid': 'path',
                    'friendly_name': 'form',
                    'status': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_account
        )

        def __update_address(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_address  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_address(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
                sid (str): The Twilio-provided string that uniquely identifies the Address resource to update.

            Keyword Args:
                auto_correct_address (bool): Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.. [optional]
                city (str): The city of the address.. [optional]
                customer_name (str): The name to associate with the address.. [optional]
                emergency_enabled (bool): Whether to enable emergency calling on the address. Can be: `true` or `false`.. [optional]
                friendly_name (str): A descriptive string that you create to describe the address. It can be up to 64 characters long.. [optional]
                postal_code (str): The postal code of the address.. [optional]
                region (str): The state or region of the address.. [optional]
                street (str): The number and street address of the address.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json',
                'operation_id': 'update_address',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'auto_correct_address',
                    'city',
                    'customer_name',
                    'emergency_enabled',
                    'friendly_name',
                    'postal_code',
                    'region',
                    'street',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'auto_correct_address':
                        (bool,),
                    'city':
                        (str,),
                    'customer_name':
                        (str,),
                    'emergency_enabled':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'postal_code':
                        (str,),
                    'region':
                        (str,),
                    'street':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'auto_correct_address': 'AutoCorrectAddress',
                    'city': 'City',
                    'customer_name': 'CustomerName',
                    'emergency_enabled': 'EmergencyEnabled',
                    'friendly_name': 'FriendlyName',
                    'postal_code': 'PostalCode',
                    'region': 'Region',
                    'street': 'Street',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'auto_correct_address': 'form',
                    'city': 'form',
                    'customer_name': 'form',
                    'emergency_enabled': 'form',
                    'friendly_name': 'form',
                    'postal_code': 'form',
                    'region': 'form',
                    'street': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_address
        )

        def __update_application(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_application  # noqa: E501

            Updates the application's properties  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_application(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the Application resource to update.

            Keyword Args:
                api_version (str): The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.. [optional]
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                message_status_callback (str): The URL we should call using a POST method to send message status information to your application.. [optional]
                sms_fallback_method (str): The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.. [optional]
                sms_method (str): The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.. [optional]
                sms_status_callback (str): Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.. [optional]
                sms_url (str): The URL we should call when the phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.. [optional]
                voice_caller_id_lookup (bool): Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.. [optional]
                voice_fallback_method (str): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.. [optional]
                voice_url (str): The URL we should call when the phone number assigned to this application receives a call.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountApplication
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_application = Endpoint(
            settings={
                'response_type': (ApiV2010AccountApplication,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json',
                'operation_id': 'update_application',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'api_version',
                    'friendly_name',
                    'message_status_callback',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_status_callback',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'api_version':
                        (str,),
                    'friendly_name':
                        (str,),
                    'message_status_callback':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_status_callback':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'api_version': 'ApiVersion',
                    'friendly_name': 'FriendlyName',
                    'message_status_callback': 'MessageStatusCallback',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_status_callback': 'SmsStatusCallback',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'api_version': 'form',
                    'friendly_name': 'form',
                    'message_status_callback': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_status_callback': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_application
        )

        def __update_call(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_call  # noqa: E501

            Initiates a call redirect or terminates a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_call(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
                sid (str): The Twilio-provided string that uniquely identifies the Call resource to update

            Keyword Args:
                fallback_method (str): The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                fallback_url (str): The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                method (str): The HTTP method we should use when calling the `url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                status (str): The new status of the resource. Can be: `canceled` or `completed`. Specifying `canceled` will attempt to hang up calls that are queued or ringing; however, it will not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).. [optional]
                status_callback_method (str): The HTTP method we should use when requesting the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.. [optional]
                twiml (str): TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive. [optional]
                url (str): The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCall
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_call = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCall,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json',
                'operation_id': 'update_call',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'fallback_method',
                    'fallback_url',
                    'method',
                    'status',
                    'status_callback',
                    'status_callback_method',
                    'twiml',
                    'url',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'fallback_method',
                    'method',
                    'status',
                    'status_callback_method',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status',): {

                        "CANCELED": "canceled",
                        "COMPLETED": "completed"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'fallback_method':
                        (str,),
                    'fallback_url':
                        (str,),
                    'method':
                        (str,),
                    'status':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'twiml':
                        (str,),
                    'url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'fallback_method': 'FallbackMethod',
                    'fallback_url': 'FallbackUrl',
                    'method': 'Method',
                    'status': 'Status',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'twiml': 'Twiml',
                    'url': 'Url',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'fallback_method': 'form',
                    'fallback_url': 'form',
                    'method': 'form',
                    'status': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'twiml': 'form',
                    'url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_call
        )

        def __update_call_feedback(
            self,
            account_sid,
            call_sid,
            quality_score,
            **kwargs
        ):
            """update_call_feedback  # noqa: E501

            Update a Feedback resource for a call  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_call_feedback(account_sid, call_sid, quality_score, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                call_sid (str): The call sid that uniquely identifies the call
                quality_score (int): The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.

            Keyword Args:
                issue ([str]): One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallFeedback
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['quality_score'] = \
                quality_score
            return self.call_with_http_info(**kwargs)

        self.update_call_feedback = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallFeedback,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json',
                'operation_id': 'update_call_feedback',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'quality_score',
                    'issue',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'quality_score',
                ],
                'nullable': [
                ],
                'enum': [
                    'issue',
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('issue',): {

                        "AUDIO-LATENCY": "audio-latency",
                        "DIGITS-NOT-CAPTURED": "digits-not-captured",
                        "DROPPED-CALL": "dropped-call",
                        "IMPERFECT-AUDIO": "imperfect-audio",
                        "INCORRECT-CALLER-ID": "incorrect-caller-id",
                        "ONE-WAY-AUDIO": "one-way-audio",
                        "POST-DIAL-DELAY": "post-dial-delay",
                        "UNSOLICITED-CALL": "unsolicited-call"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'quality_score':
                        (int,),
                    'issue':
                        ([str],),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'quality_score': 'QualityScore',
                    'issue': 'Issue',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'quality_score': 'form',
                    'issue': 'form',
                },
                'collection_format_map': {
                    'issue': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_call_feedback
        )

        def __update_call_recording(
            self,
            account_sid,
            call_sid,
            sid,
            status,
            **kwargs
        ):
            """update_call_recording  # noqa: E501

            Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_call_recording(account_sid, call_sid, sid, status, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
                sid (str): The Twilio-provided string that uniquely identifies the Recording resource to update.
                status (str): The new status of the recording. Can be: `stopped`, `paused`, `in-progress`.

            Keyword Args:
                pause_behavior (str): Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallCallRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['sid'] = \
                sid
            kwargs['status'] = \
                status
            return self.call_with_http_info(**kwargs)

        self.update_call_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallCallRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json',
                'operation_id': 'update_call_recording',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'sid',
                    'status',
                    'pause_behavior',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'sid',
                    'status',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "IN-PROGRESS": "in-progress",
                        "PAUSED": "paused",
                        "STOPPED": "stopped",
                        "PROCESSING": "processing",
                        "COMPLETED": "completed",
                        "ABSENT": "absent"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'sid':
                        (str,),
                    'status':
                        (str,),
                    'pause_behavior':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'sid': 'Sid',
                    'status': 'Status',
                    'pause_behavior': 'PauseBehavior',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'sid': 'path',
                    'status': 'form',
                    'pause_behavior': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_call_recording
        )

        def __update_conference(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_conference  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_conference(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
                sid (str): The Twilio-provided string that uniquely identifies the Conference resource to update

            Keyword Args:
                announce_method (str): The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`. [optional]
                announce_url (str): The URL we should call to announce something into the conference. The URL can return an MP3, a WAV, or a TwiML document with `<Play>` or `<Say>`.. [optional]
                status (str): The new status of the resource. Can be:  Can be: `init`, `in-progress`, or `completed`. Specifying `completed` will end the conference and hang up all participants. [optional] if omitted the server will use the default value of "completed"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_conference = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConference,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json',
                'operation_id': 'update_conference',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'announce_method',
                    'announce_url',
                    'status',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'announce_method',
                    'status',
                ],
                'validation': [
                    'account_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('announce_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status',): {

                        "COMPLETED": "completed"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'announce_method':
                        (str,),
                    'announce_url':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'announce_method': 'AnnounceMethod',
                    'announce_url': 'AnnounceUrl',
                    'status': 'Status',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'announce_method': 'form',
                    'announce_url': 'form',
                    'status': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_conference
        )

        def __update_conference_recording(
            self,
            account_sid,
            conference_sid,
            sid,
            status,
            **kwargs
        ):
            """update_conference_recording  # noqa: E501

            Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_conference_recording(account_sid, conference_sid, sid, status, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
                conference_sid (str): The Conference SID that identifies the conference associated with the recording to update.
                sid (str): The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
                status (str): The new status of the recording. Can be: `stopped`, `paused`, `in-progress`.

            Keyword Args:
                pause_behavior (str): Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConferenceConferenceRecording
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['sid'] = \
                sid
            kwargs['status'] = \
                status
            return self.call_with_http_info(**kwargs)

        self.update_conference_recording = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConferenceConferenceRecording,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json',
                'operation_id': 'update_conference_recording',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                    'status',
                    'pause_behavior',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'sid',
                    'status',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "IN-PROGRESS": "in-progress",
                        "PAUSED": "paused",
                        "STOPPED": "stopped",
                        "PROCESSING": "processing",
                        "COMPLETED": "completed",
                        "ABSENT": "absent"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'sid':
                        (str,),
                    'status':
                        (str,),
                    'pause_behavior':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'sid': 'Sid',
                    'status': 'Status',
                    'pause_behavior': 'PauseBehavior',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'sid': 'path',
                    'status': 'form',
                    'pause_behavior': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_conference_recording
        )

        def __update_connect_app(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_connect_app  # noqa: E501

            Update a connect-app with the specified parameters  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_connect_app(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the ConnectApp resource to update.

            Keyword Args:
                authorize_redirect_url (str): The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.. [optional]
                company_name (str): The company name to set for the Connect App.. [optional]
                deauthorize_callback_method (str): The HTTP method to use when calling `deauthorize_callback_url`.. [optional]
                deauthorize_callback_url (str): The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.. [optional]
                description (str): A description of the Connect App.. [optional]
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                homepage_url (str): A public URL where users can obtain more information about this Connect App.. [optional]
                permissions ([str]): A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConnectApp
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_connect_app = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConnectApp,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json',
                'operation_id': 'update_connect_app',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'authorize_redirect_url',
                    'company_name',
                    'deauthorize_callback_method',
                    'deauthorize_callback_url',
                    'description',
                    'friendly_name',
                    'homepage_url',
                    'permissions',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'deauthorize_callback_method',
                    'permissions',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('deauthorize_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('permissions',): {

                        "GET-ALL": "get-all",
                        "POST-ALL": "post-all"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'authorize_redirect_url':
                        (str,),
                    'company_name':
                        (str,),
                    'deauthorize_callback_method':
                        (str,),
                    'deauthorize_callback_url':
                        (str,),
                    'description':
                        (str,),
                    'friendly_name':
                        (str,),
                    'homepage_url':
                        (str,),
                    'permissions':
                        ([str],),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'authorize_redirect_url': 'AuthorizeRedirectUrl',
                    'company_name': 'CompanyName',
                    'deauthorize_callback_method': 'DeauthorizeCallbackMethod',
                    'deauthorize_callback_url': 'DeauthorizeCallbackUrl',
                    'description': 'Description',
                    'friendly_name': 'FriendlyName',
                    'homepage_url': 'HomepageUrl',
                    'permissions': 'Permissions',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'authorize_redirect_url': 'form',
                    'company_name': 'form',
                    'deauthorize_callback_method': 'form',
                    'deauthorize_callback_url': 'form',
                    'description': 'form',
                    'friendly_name': 'form',
                    'homepage_url': 'form',
                    'permissions': 'form',
                },
                'collection_format_map': {
                    'permissions': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_connect_app
        )

        def __update_incoming_phone_number(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_incoming_phone_number  # noqa: E501

            Update an incoming-phone-number instance.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_incoming_phone_number(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
                sid (str): The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.

            Keyword Args:
                account_sid2 (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).. [optional]
                address_sid (str): The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations.. [optional]
                api_version (str): The API version to use for incoming calls made to the phone number. The default is `2010-04-01`.. [optional]
                bundle_sid (str): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.. [optional]
                emergency_address_sid (str): The SID of the emergency address configuration to use for emergency calling from this phone number.. [optional]
                emergency_status (str): The configuration status parameter that determines whether the phone number is enabled for emergency calling.. [optional]
                friendly_name (str): A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.. [optional]
                identity_sid (str): The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations.. [optional]
                sms_application_sid (str): The SID of the application that should handle SMS messages sent to the number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.. [optional]
                sms_method (str): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                sms_url (str): The URL we should call when the phone number receives an incoming SMS message.. [optional]
                status_callback (str): The URL we should call using the `status_callback_method` to send status information to your application.. [optional]
                status_callback_method (str): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                trunk_sid (str): The SID of the Trunk we should use to handle phone calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.. [optional]
                voice_application_sid (str): The SID of the application we should use to handle phone calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.. [optional]
                voice_caller_id_lookup (bool): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.. [optional]
                voice_fallback_method (str): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.. [optional]
                voice_method (str): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                voice_receive_mode (str): The configuration parameter for the phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.. [optional]
                voice_url (str): The URL that we should call to answer a call to the phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountIncomingPhoneNumber
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_incoming_phone_number = Endpoint(
            settings={
                'response_type': (ApiV2010AccountIncomingPhoneNumber,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json',
                'operation_id': 'update_incoming_phone_number',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'account_sid2',
                    'address_sid',
                    'api_version',
                    'bundle_sid',
                    'emergency_address_sid',
                    'emergency_status',
                    'friendly_name',
                    'identity_sid',
                    'sms_application_sid',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                    'status_callback',
                    'status_callback_method',
                    'trunk_sid',
                    'voice_application_sid',
                    'voice_caller_id_lookup',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_receive_mode',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'emergency_status',
                    'sms_fallback_method',
                    'sms_method',
                    'status_callback_method',
                    'voice_fallback_method',
                    'voice_method',
                    'voice_receive_mode',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                    'account_sid2',
                    'address_sid',
                    'bundle_sid',
                    'emergency_address_sid',
                    'identity_sid',
                    'sms_application_sid',
                    'trunk_sid',
                    'voice_application_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('account_sid2',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('bundle_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_address_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('identity_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^RI[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sms_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^TK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('voice_application_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('emergency_status',): {

                        "ACTIVE": "Active",
                        "INACTIVE": "Inactive"
                    },
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_receive_mode',): {

                        "VOICE": "voice",
                        "FAX": "fax"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'account_sid2':
                        (str,),
                    'address_sid':
                        (str,),
                    'api_version':
                        (str,),
                    'bundle_sid':
                        (str,),
                    'emergency_address_sid':
                        (str,),
                    'emergency_status':
                        (str,),
                    'friendly_name':
                        (str,),
                    'identity_sid':
                        (str,),
                    'sms_application_sid':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                    'status_callback':
                        (str,),
                    'status_callback_method':
                        (str,),
                    'trunk_sid':
                        (str,),
                    'voice_application_sid':
                        (str,),
                    'voice_caller_id_lookup':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_receive_mode':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'account_sid2': 'AccountSid',
                    'address_sid': 'AddressSid',
                    'api_version': 'ApiVersion',
                    'bundle_sid': 'BundleSid',
                    'emergency_address_sid': 'EmergencyAddressSid',
                    'emergency_status': 'EmergencyStatus',
                    'friendly_name': 'FriendlyName',
                    'identity_sid': 'IdentitySid',
                    'sms_application_sid': 'SmsApplicationSid',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                    'status_callback': 'StatusCallback',
                    'status_callback_method': 'StatusCallbackMethod',
                    'trunk_sid': 'TrunkSid',
                    'voice_application_sid': 'VoiceApplicationSid',
                    'voice_caller_id_lookup': 'VoiceCallerIdLookup',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_receive_mode': 'VoiceReceiveMode',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'account_sid2': 'form',
                    'address_sid': 'form',
                    'api_version': 'form',
                    'bundle_sid': 'form',
                    'emergency_address_sid': 'form',
                    'emergency_status': 'form',
                    'friendly_name': 'form',
                    'identity_sid': 'form',
                    'sms_application_sid': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                    'status_callback': 'form',
                    'status_callback_method': 'form',
                    'trunk_sid': 'form',
                    'voice_application_sid': 'form',
                    'voice_caller_id_lookup': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_receive_mode': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_incoming_phone_number
        )

        def __update_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the Key resource to update.

            Keyword Args:
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json',
                'operation_id': 'update_key',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_key
        )

        def __update_member(
            self,
            account_sid,
            queue_sid,
            call_sid,
            url,
            **kwargs
        ):
            """update_member  # noqa: E501

            Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_member(account_sid, queue_sid, call_sid, url, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
                queue_sid (str): The SID of the Queue in which to find the members to update.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
                url (str): The absolute URL of the Queue resource.

            Keyword Args:
                method (str): How to pass the update request data. Can be `GET` or `POST` and the default is `POST`. `POST` sends the data as encoded form data and `GET` sends the data as query parameters.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountQueueMember
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['queue_sid'] = \
                queue_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['url'] = \
                url
            return self.call_with_http_info(**kwargs)

        self.update_member = Endpoint(
            settings={
                'response_type': (ApiV2010AccountQueueMember,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json',
                'operation_id': 'update_member',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'queue_sid',
                    'call_sid',
                    'url',
                    'method',
                ],
                'required': [
                    'account_sid',
                    'queue_sid',
                    'call_sid',
                    'url',
                ],
                'nullable': [
                ],
                'enum': [
                    'method',
                ],
                'validation': [
                    'account_sid',
                    'queue_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('queue_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'queue_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'url':
                        (str,),
                    'method':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'queue_sid': 'QueueSid',
                    'call_sid': 'CallSid',
                    'url': 'Url',
                    'method': 'Method',
                },
                'location_map': {
                    'account_sid': 'path',
                    'queue_sid': 'path',
                    'call_sid': 'path',
                    'url': 'form',
                    'method': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_member
        )

        def __update_message(
            self,
            account_sid,
            sid,
            body,
            **kwargs
        ):
            """update_message  # noqa: E501

            To redact a message-body from a post-flight message record, post to the message instance resource with an empty body  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_message(account_sid, sid, body, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the Message resource to update.
                body (str): The text of the message you want to send. Can be up to 1,600 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountMessage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_message = Endpoint(
            settings={
                'response_type': (ApiV2010AccountMessage,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json',
                'operation_id': 'update_message',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'body',
                ],
                'required': [
                    'account_sid',
                    'sid',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^(SM|MM)[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'body': 'Body',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'body': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_message
        )

        def __update_outgoing_caller_id(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_outgoing_caller_id  # noqa: E501

            Updates the caller-id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_outgoing_caller_id(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.

            Keyword Args:
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountOutgoingCallerId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_outgoing_caller_id = Endpoint(
            settings={
                'response_type': (ApiV2010AccountOutgoingCallerId,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json',
                'operation_id': 'update_outgoing_caller_id',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_outgoing_caller_id
        )

        def __update_participant(
            self,
            account_sid,
            conference_sid,
            call_sid,
            **kwargs
        ):
            """update_participant  # noqa: E501

            Update the properties of the participant  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_participant(account_sid, conference_sid, call_sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
                conference_sid (str): The SID of the conference with the participant to update.
                call_sid (str): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.

            Keyword Args:
                announce_method (str): The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.. [optional]
                announce_url (str): The URL we call using the `announce_method` for an announcement to the participant. The URL must return an MP3 file, a WAV file, or a TwiML document that contains `<Play>` or `<Say>` commands.. [optional]
                beep_on_exit (bool): Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.. [optional]
                call_sid_to_coach (str): The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.. [optional]
                coaching (bool): Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.. [optional]
                end_conference_on_exit (bool): Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.. [optional]
                hold (bool): Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.. [optional]
                hold_method (str): The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.. [optional]
                hold_url (str): The URL we call using the `hold_method` for  music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains the `<Play>`, `<Say>` or `<Redirect>` commands.. [optional]
                muted (bool): Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.. [optional]
                wait_method (str): The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.. [optional]
                wait_url (str): The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountConferenceParticipant
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['conference_sid'] = \
                conference_sid
            kwargs['call_sid'] = \
                call_sid
            return self.call_with_http_info(**kwargs)

        self.update_participant = Endpoint(
            settings={
                'response_type': (ApiV2010AccountConferenceParticipant,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json',
                'operation_id': 'update_participant',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                    'announce_method',
                    'announce_url',
                    'beep_on_exit',
                    'call_sid_to_coach',
                    'coaching',
                    'end_conference_on_exit',
                    'hold',
                    'hold_method',
                    'hold_url',
                    'muted',
                    'wait_method',
                    'wait_url',
                ],
                'required': [
                    'account_sid',
                    'conference_sid',
                    'call_sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'announce_method',
                    'hold_method',
                    'wait_method',
                ],
                'validation': [
                    'account_sid',
                    'conference_sid',
                    'call_sid_to_coach',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('conference_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CF[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid_to_coach',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('announce_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('hold_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('wait_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'conference_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'announce_method':
                        (str,),
                    'announce_url':
                        (str,),
                    'beep_on_exit':
                        (bool,),
                    'call_sid_to_coach':
                        (str,),
                    'coaching':
                        (bool,),
                    'end_conference_on_exit':
                        (bool,),
                    'hold':
                        (bool,),
                    'hold_method':
                        (str,),
                    'hold_url':
                        (str,),
                    'muted':
                        (bool,),
                    'wait_method':
                        (str,),
                    'wait_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'conference_sid': 'ConferenceSid',
                    'call_sid': 'CallSid',
                    'announce_method': 'AnnounceMethod',
                    'announce_url': 'AnnounceUrl',
                    'beep_on_exit': 'BeepOnExit',
                    'call_sid_to_coach': 'CallSidToCoach',
                    'coaching': 'Coaching',
                    'end_conference_on_exit': 'EndConferenceOnExit',
                    'hold': 'Hold',
                    'hold_method': 'HoldMethod',
                    'hold_url': 'HoldUrl',
                    'muted': 'Muted',
                    'wait_method': 'WaitMethod',
                    'wait_url': 'WaitUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'conference_sid': 'path',
                    'call_sid': 'path',
                    'announce_method': 'form',
                    'announce_url': 'form',
                    'beep_on_exit': 'form',
                    'call_sid_to_coach': 'form',
                    'coaching': 'form',
                    'end_conference_on_exit': 'form',
                    'hold': 'form',
                    'hold_method': 'form',
                    'hold_url': 'form',
                    'muted': 'form',
                    'wait_method': 'form',
                    'wait_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_participant
        )

        def __update_payments(
            self,
            account_sid,
            call_sid,
            sid,
            idempotency_key,
            status_callback,
            **kwargs
        ):
            """update_payments  # noqa: E501

            update an instance of payments with different phases of payment flows.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_payments(account_sid, call_sid, sid, idempotency_key, status_callback, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
                call_sid (str): The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
                sid (str): The SID of Payments session that needs to be updated.
                idempotency_key (str): A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
                status_callback (str): Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.

            Keyword Args:
                capture (str): The piece of payment information that you wish the caller to enter. Must be one of `payment-card-number`, `expiration-date`, `security-code`, `postal-code`, `bank-routing-number`, or `bank-account-number`.. [optional]
                status (str): Indicates whether the current payment session should be cancelled or completed. When `cancel` the payment session is cancelled. When `complete`, Twilio sends the payment information to the selected <Pay> connector for processing.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountCallPayments
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['call_sid'] = \
                call_sid
            kwargs['sid'] = \
                sid
            kwargs['idempotency_key'] = \
                idempotency_key
            kwargs['status_callback'] = \
                status_callback
            return self.call_with_http_info(**kwargs)

        self.update_payments = Endpoint(
            settings={
                'response_type': (ApiV2010AccountCallPayments,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json',
                'operation_id': 'update_payments',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'call_sid',
                    'sid',
                    'idempotency_key',
                    'status_callback',
                    'capture',
                    'status',
                ],
                'required': [
                    'account_sid',
                    'call_sid',
                    'sid',
                    'idempotency_key',
                    'status_callback',
                ],
                'nullable': [
                ],
                'enum': [
                    'capture',
                    'status',
                ],
                'validation': [
                    'account_sid',
                    'call_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('call_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CA[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('capture',): {

                        "PAYMENT-CARD-NUMBER": "payment-card-number",
                        "EXPIRATION-DATE": "expiration-date",
                        "SECURITY-CODE": "security-code",
                        "POSTAL-CODE": "postal-code",
                        "BANK-ROUTING-NUMBER": "bank-routing-number",
                        "BANK-ACCOUNT-NUMBER": "bank-account-number"
                    },
                    ('status',): {

                        "COMPLETE": "complete",
                        "CANCEL": "cancel"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'call_sid':
                        (str,),
                    'sid':
                        (str,),
                    'idempotency_key':
                        (str,),
                    'status_callback':
                        (str,),
                    'capture':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'call_sid': 'CallSid',
                    'sid': 'Sid',
                    'idempotency_key': 'IdempotencyKey',
                    'status_callback': 'StatusCallback',
                    'capture': 'Capture',
                    'status': 'Status',
                },
                'location_map': {
                    'account_sid': 'path',
                    'call_sid': 'path',
                    'sid': 'path',
                    'idempotency_key': 'form',
                    'status_callback': 'form',
                    'capture': 'form',
                    'status': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_payments
        )

        def __update_queue(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_queue  # noqa: E501

            Update the queue with the new parameters  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_queue(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
                sid (str): The Twilio-provided string that uniquely identifies the Queue resource to update

            Keyword Args:
                friendly_name (str): A descriptive string that you created to describe this resource. It can be up to 64 characters long.. [optional]
                max_size (int): The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountQueue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_queue = Endpoint(
            settings={
                'response_type': (ApiV2010AccountQueue,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json',
                'operation_id': 'update_queue',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                    'max_size',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^QU[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                    'max_size':
                        (int,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                    'max_size': 'MaxSize',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                    'max_size': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_queue
        )

        def __update_short_code(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_short_code  # noqa: E501

            Update a short code with the following parameters  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_short_code(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
                sid (str): The Twilio-provided string that uniquely identifies the ShortCode resource to update

            Keyword Args:
                api_version (str): The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.. [optional]
                friendly_name (str): A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.. [optional]
                sms_fallback_method (str): The HTTP method that we should use to call the `sms_fallback_url`. Can be: `GET` or `POST`.. [optional]
                sms_fallback_url (str): The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.. [optional]
                sms_method (str): The HTTP method we should use when calling the `sms_url`. Can be: `GET` or `POST`.. [optional]
                sms_url (str): The URL we should call when receiving an incoming SMS message to this short code.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountShortCode
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_short_code = Endpoint(
            settings={
                'response_type': (ApiV2010AccountShortCode,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json',
                'operation_id': 'update_short_code',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'api_version',
                    'friendly_name',
                    'sms_fallback_method',
                    'sms_fallback_url',
                    'sms_method',
                    'sms_url',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'sms_fallback_method',
                    'sms_method',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('sms_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('sms_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'api_version':
                        (str,),
                    'friendly_name':
                        (str,),
                    'sms_fallback_method':
                        (str,),
                    'sms_fallback_url':
                        (str,),
                    'sms_method':
                        (str,),
                    'sms_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'api_version': 'ApiVersion',
                    'friendly_name': 'FriendlyName',
                    'sms_fallback_method': 'SmsFallbackMethod',
                    'sms_fallback_url': 'SmsFallbackUrl',
                    'sms_method': 'SmsMethod',
                    'sms_url': 'SmsUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'api_version': 'form',
                    'friendly_name': 'form',
                    'sms_fallback_method': 'form',
                    'sms_fallback_url': 'form',
                    'sms_method': 'form',
                    'sms_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_short_code
        )

        def __update_signing_key(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_signing_key  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_signing_key(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str):
                sid (str):

            Keyword Args:
                friendly_name (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSigningKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_signing_key = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSigningKey,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json',
                'operation_id': 'update_signing_key',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SK[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_signing_key
        )

        def __update_sip_credential(
            self,
            account_sid,
            credential_list_sid,
            sid,
            **kwargs
        ):
            """update_sip_credential  # noqa: E501

            Update a credential resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sip_credential(account_sid, credential_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                credential_list_sid (str): The unique id that identifies the credential list that includes this credential.
                sid (str): The unique id that identifies the resource to update.

            Keyword Args:
                password (str): The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialListSipCredential
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['credential_list_sid'] = \
                credential_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_sip_credential = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialListSipCredential,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json',
                'operation_id': 'update_sip_credential',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                    'password',
                ],
                'required': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'credential_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('credential_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CR[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'credential_list_sid':
                        (str,),
                    'sid':
                        (str,),
                    'password':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'credential_list_sid': 'CredentialListSid',
                    'sid': 'Sid',
                    'password': 'Password',
                },
                'location_map': {
                    'account_sid': 'path',
                    'credential_list_sid': 'path',
                    'sid': 'path',
                    'password': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_sip_credential
        )

        def __update_sip_credential_list(
            self,
            account_sid,
            sid,
            friendly_name,
            **kwargs
        ):
            """update_sip_credential_list  # noqa: E501

            Update a Credential List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sip_credential_list(account_sid, sid, friendly_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the Account that is responsible for this resource.
                sid (str): The credential list Sid that uniquely identifies this resource
                friendly_name (str): A human readable descriptive text for a CredentialList, up to 64 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipCredentialList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            kwargs['friendly_name'] = \
                friendly_name
            return self.call_with_http_info(**kwargs)

        self.update_sip_credential_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipCredentialList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json',
                'operation_id': 'update_sip_credential_list',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^CL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_sip_credential_list
        )

        def __update_sip_domain(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_sip_domain  # noqa: E501

            Update the attributes of a domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sip_domain(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
                sid (str): The Twilio-provided string that uniquely identifies the SipDomain resource to update.

            Keyword Args:
                byoc_trunk_sid (str): The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.. [optional]
                domain_name (str): The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.. [optional]
                emergency_caller_sid (str): Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.. [optional]
                emergency_calling_enabled (bool): Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.. [optional]
                friendly_name (str): A descriptive string that you created to describe the resource. It can be up to 64 characters long.. [optional]
                secure (bool): Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.. [optional]
                sip_registration (bool): Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.. [optional]
                voice_fallback_method (str): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.. [optional]
                voice_fallback_url (str): The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.. [optional]
                voice_method (str): The HTTP method we should use to call `voice_url`. [optional]
                voice_status_callback_method (str): The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.. [optional]
                voice_status_callback_url (str): The URL that we should call to pass status parameters (such as call ended) to your application.. [optional]
                voice_url (str): The URL we should call when the domain receives a call.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipDomain
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_sip_domain = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipDomain,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json',
                'operation_id': 'update_sip_domain',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'byoc_trunk_sid',
                    'domain_name',
                    'emergency_caller_sid',
                    'emergency_calling_enabled',
                    'friendly_name',
                    'secure',
                    'sip_registration',
                    'voice_fallback_method',
                    'voice_fallback_url',
                    'voice_method',
                    'voice_status_callback_method',
                    'voice_status_callback_url',
                    'voice_url',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'voice_fallback_method',
                    'voice_method',
                    'voice_status_callback_method',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                    'byoc_trunk_sid',
                    'emergency_caller_sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^SD[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('byoc_trunk_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^BY[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('emergency_caller_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^PN[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('voice_fallback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                    ('voice_status_callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'byoc_trunk_sid':
                        (str,),
                    'domain_name':
                        (str,),
                    'emergency_caller_sid':
                        (str,),
                    'emergency_calling_enabled':
                        (bool,),
                    'friendly_name':
                        (str,),
                    'secure':
                        (bool,),
                    'sip_registration':
                        (bool,),
                    'voice_fallback_method':
                        (str,),
                    'voice_fallback_url':
                        (str,),
                    'voice_method':
                        (str,),
                    'voice_status_callback_method':
                        (str,),
                    'voice_status_callback_url':
                        (str,),
                    'voice_url':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'byoc_trunk_sid': 'ByocTrunkSid',
                    'domain_name': 'DomainName',
                    'emergency_caller_sid': 'EmergencyCallerSid',
                    'emergency_calling_enabled': 'EmergencyCallingEnabled',
                    'friendly_name': 'FriendlyName',
                    'secure': 'Secure',
                    'sip_registration': 'SipRegistration',
                    'voice_fallback_method': 'VoiceFallbackMethod',
                    'voice_fallback_url': 'VoiceFallbackUrl',
                    'voice_method': 'VoiceMethod',
                    'voice_status_callback_method': 'VoiceStatusCallbackMethod',
                    'voice_status_callback_url': 'VoiceStatusCallbackUrl',
                    'voice_url': 'VoiceUrl',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'byoc_trunk_sid': 'form',
                    'domain_name': 'form',
                    'emergency_caller_sid': 'form',
                    'emergency_calling_enabled': 'form',
                    'friendly_name': 'form',
                    'secure': 'form',
                    'sip_registration': 'form',
                    'voice_fallback_method': 'form',
                    'voice_fallback_url': 'form',
                    'voice_method': 'form',
                    'voice_status_callback_method': 'form',
                    'voice_status_callback_url': 'form',
                    'voice_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_sip_domain
        )

        def __update_sip_ip_access_control_list(
            self,
            account_sid,
            sid,
            friendly_name,
            **kwargs
        ):
            """update_sip_ip_access_control_list  # noqa: E501

            Rename an IpAccessControlList  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sip_ip_access_control_list(account_sid, sid, friendly_name, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                sid (str): A 34 character string that uniquely identifies the resource to udpate.
                friendly_name (str): A human readable descriptive text, up to 64 characters long.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            kwargs['friendly_name'] = \
                friendly_name
            return self.call_with_http_info(**kwargs)

        self.update_sip_ip_access_control_list = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlList,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json',
                'operation_id': 'update_sip_ip_access_control_list',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                    'friendly_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_sip_ip_access_control_list
        )

        def __update_sip_ip_address(
            self,
            account_sid,
            ip_access_control_list_sid,
            sid,
            **kwargs
        ):
            """update_sip_ip_address  # noqa: E501

            Update an IpAddress resource.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sip_ip_address(account_sid, ip_access_control_list_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
                ip_access_control_list_sid (str): The IpAccessControlList Sid that identifies the IpAddress resources to update.
                sid (str): A 34 character string that identifies the IpAddress resource to update.

            Keyword Args:
                cidr_prefix_length (int): An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.. [optional]
                friendly_name (str): A human readable descriptive text for this resource, up to 64 characters long.. [optional]
                ip_address (str): An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountSipSipIpAccessControlListSipIpAddress
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['ip_access_control_list_sid'] = \
                ip_access_control_list_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_sip_ip_address = Endpoint(
            settings={
                'response_type': (ApiV2010AccountSipSipIpAccessControlListSipIpAddress,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json',
                'operation_id': 'update_sip_ip_address',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                    'cidr_prefix_length',
                    'friendly_name',
                    'ip_address',
                ],
                'required': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'account_sid',
                    'ip_access_control_list_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('ip_access_control_list_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AL[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^IP[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'ip_access_control_list_sid':
                        (str,),
                    'sid':
                        (str,),
                    'cidr_prefix_length':
                        (int,),
                    'friendly_name':
                        (str,),
                    'ip_address':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'ip_access_control_list_sid': 'IpAccessControlListSid',
                    'sid': 'Sid',
                    'cidr_prefix_length': 'CidrPrefixLength',
                    'friendly_name': 'FriendlyName',
                    'ip_address': 'IpAddress',
                },
                'location_map': {
                    'account_sid': 'path',
                    'ip_access_control_list_sid': 'path',
                    'sid': 'path',
                    'cidr_prefix_length': 'form',
                    'friendly_name': 'form',
                    'ip_address': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_sip_ip_address
        )

        def __update_usage_trigger(
            self,
            account_sid,
            sid,
            **kwargs
        ):
            """update_usage_trigger  # noqa: E501

            Update an instance of a usage trigger  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_usage_trigger(account_sid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                account_sid (str): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
                sid (str): The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.

            Keyword Args:
                callback_method (str): The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.. [optional]
                callback_url (str): The URL we should call using `callback_method` when the trigger fires.. [optional]
                friendly_name (str): A descriptive string that you create to describe the resource. It can be up to 64 characters long.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiV2010AccountUsageUsageTrigger
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_sid'] = \
                account_sid
            kwargs['sid'] = \
                sid
            return self.call_with_http_info(**kwargs)

        self.update_usage_trigger = Endpoint(
            settings={
                'response_type': (ApiV2010AccountUsageUsageTrigger,),
                'auth': [
                    'accountSid_authToken'
                ],
                'endpoint_path': '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json',
                'operation_id': 'update_usage_trigger',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.twilio.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_sid',
                    'sid',
                    'callback_method',
                    'callback_url',
                    'friendly_name',
                ],
                'required': [
                    'account_sid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                    'callback_method',
                ],
                'validation': [
                    'account_sid',
                    'sid',
                ]
            },
            root_map={
                'validations': {
                    ('account_sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^AC[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                    ('sid',): {
                        'max_length': 34,
                        'min_length': 34,
                        'regex': {
                            'pattern': r'^UT[0-9a-fA-F]{32}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('callback_method',): {

                        "HEAD": "head",
                        "GET": "get",
                        "POST": "post",
                        "PATCH": "patch",
                        "PUT": "put",
                        "DELETE": "delete",
                        "HEAD": "HEAD",
                        "GET": "GET",
                        "POST": "POST",
                        "PATCH": "PATCH",
                        "PUT": "PUT",
                        "DELETE": "DELETE"
                    },
                },
                'openapi_types': {
                    'account_sid':
                        (str,),
                    'sid':
                        (str,),
                    'callback_method':
                        (str,),
                    'callback_url':
                        (str,),
                    'friendly_name':
                        (str,),
                },
                'attribute_map': {
                    'account_sid': 'AccountSid',
                    'sid': 'Sid',
                    'callback_method': 'CallbackMethod',
                    'callback_url': 'CallbackUrl',
                    'friendly_name': 'FriendlyName',
                },
                'location_map': {
                    'account_sid': 'path',
                    'sid': 'path',
                    'callback_method': 'form',
                    'callback_url': 'form',
                    'friendly_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__update_usage_trigger
        )
